import os
import requests
import subprocess

print("üéØ –ü–†–û–í–ï–†–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –î–ï–ù–¨ 3")
print("=" * 55)

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ main.py
print("\\n1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –≤ main.py:")
with open('main.py', 'r', encoding='utf-8') as f:
    main_content = f.read()

required_models = [
    'Employee', 'ManufacturingOrder', 'Operation', 
    'DefectReport', 'Order', 'Project'
]

all_models_imported = True
for model in required_models:
    if f'from src.models.{model.lower().replace(" ", "_")} import {model}' in main_content:
        print(f"   ‚úÖ {model} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    else:
        print(f"   ‚ùå {model} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        all_models_imported = False

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS middleware
print("\\n2. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS middleware:")
if 'CORSMiddleware' in main_content and 'allow_origins=["*"]' in main_content:
    print("   ‚úÖ CORS middleware –¥–æ–±–∞–≤–ª–µ–Ω")
else:
    print("   ‚ùå CORS middleware –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    all_models_imported = False

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º .env.example
print("\\n3. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env.example:")
if os.path.exists('.env.example'):
    with open('.env.example', 'r') as f:
        env_content = f.read()
    if 'DATABASE_URL' in env_content:
        print("   ‚úÖ .env.example —Å–æ–∑–¥–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ë–î")
    else:
        print("   ‚ùå .env.example –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL")
else:
    print("   ‚ùå .env.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    all_models_imported = False

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º README.md
print("\\n4. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md:")
with open('README.md', 'r', encoding='utf-8') as f:
    readme_content = f.read()

if '## üöÄ Quick Start' in readme_content or '## üöÄ –ó–∞–ø—É—Å–∫' in readme_content:
    print("   ‚úÖ README.md —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É")
else:
    print("   ‚ùå README.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É")
    all_models_imported = False

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É API
print("\\n5. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API:")
try:
    response = requests.get('http://localhost:8000/api/v1/health', timeout=5)
    if response.status_code == 200:
        data = response.json()
        print(f"   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status')} - {data.get('message')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ endpoints
        endpoints_to_check = [
            '/api/v1/employees',
            '/api/v1/orders', 
            '/api/v1/mo',
            '/api/v1/operations',
            '/api/v1/defects',
            '/api/v1/projects'
        ]
        
        print("   üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints:")
        for endpoint in endpoints_to_check:
            try:
                resp = requests.get(f'http://localhost:8000{endpoint}', timeout=3)
                if resp.status_code == 200:
                    print(f"      ‚úÖ GET {endpoint}")
                else:
                    print(f"      ‚ùå GET {endpoint} - {resp.status_code}")
            except:
                print(f"      ‚ùå GET {endpoint} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
    else:
        print(f"   ‚ùå API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        all_models_imported = False
except Exception as e:
    print(f"   ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    all_models_imported = False

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å GitHub
print("\\n6. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub:")
try:
    result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
    if result.stdout.strip() == "":
        print("   ‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
    else:
        print("   ‚ùå –ï—Å—Ç—å –Ω–µ–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(f"      {result.stdout.strip()}")
        all_models_imported = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    subprocess.run(['git', 'fetch', 'origin'], capture_output=True)
    local = subprocess.run(['git', 'rev-parse', 'HEAD'], capture_output=True, text=True).stdout.strip()
    remote = subprocess.run(['git', 'rev-parse', 'origin/main'], capture_output=True, text=True).stdout.strip()
    
    if local == remote:
        print("   ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub")
    else:
        print("   ‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å GitHub")
        all_models_imported = False
        
except Exception as e:
    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")
    all_models_imported = False

# –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
print("\\n" + "="*55)
print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:")
if all_models_imported:
    print("‚úÖ –í–°–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–ï–ù–¨ 3 –í–´–ü–û–õ–ù–ï–ù–´!")
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ù–Æ 4!")
else:
    print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

print("\\nüìä –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê:")
print(f"   –ú–æ–¥–µ–ª–∏ –≤ main.py: {len(required_models)}/{len(required_models)}")
print(f"   CORS: {'‚úÖ' if 'CORSMiddleware' in main_content else '‚ùå'}")
print(f"   .env.example: {'‚úÖ' if os.path.exists('.env.example') else '‚ùå'}")
print(f"   README –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {'‚úÖ' if 'Quick Start' in readme_content else '‚ùå'}")
print(f"   API —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {'‚úÖ' if 'healthy' in str(response.json()) else '‚ùå'}")
print(f"   GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ' if local == remote else '‚ùå'}")
