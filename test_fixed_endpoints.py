import requests
import time
import sys

def wait_for_server():
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(10):
        try:
            response = requests.get("http://localhost:8000/api/v1/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
                return True
        except:
            print(f"‚è≥ {i+1}/10...")
            time.sleep(2)
    return False

def test_critical_endpoints():
    base_url = "http://localhost:8000/api/v1"
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 45)
    
    endpoints = [
        ("Health", "/health"),
        ("Orders", "/orders"),
        ("Employees", "/employees"),
        ("Manufacturing Orders", "/mo"),
        ("Operations", "/operations"),
        ("Projects", "/projects")
    ]
    
    results = []
    for name, endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"{status} {name}: {response.status_code}")
            results.append(response.status_code == 200)
            
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    print(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(data)}")
        except Exception as e:
            print(f"‚ùå {name}: –û—à–∏–±–∫–∞ - {e}")
            results.append(False)
    
    working = sum(results)
    total = len(results)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {working}/{total} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if working >= 5:
        print("üéâ –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –û—à–∏–±–∫–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        print("‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    if wait_for_server():
        test_critical_endpoints()
