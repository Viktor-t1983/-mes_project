import requests
import json

BASE_URL = "http://localhost:8000"

def test_crud_operations():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRUD –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee_data = {
        "name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        "position": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞–Ω–∫–∞",
        "department": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"
    }
    
    print("1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/employees", json=employee_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω")
            employee_id = response.json().get('id', 1)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            employee_id = 1  # fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        employee_id = 1

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ 001",
        "description": "–ó–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
        "status": "–Ω–æ–≤—ã–π"
    }
    
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/orders", json=order_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω")
            order_id = response.json().get('id', 1)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            order_id = 1
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        order_id = 1

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (MO)
    mo_data = {
        "order_id": order_id,
        "name": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ 001",
        "status": "–∞–∫—Ç–∏–≤–Ω–æ"
    }
    
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/mo", json=mo_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
            mo_id = response.json().get('id', 1)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            mo_id = 1
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MO: {e}")
        mo_id = 1

    # 4. –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_start_data = {
        "manufacturing_order_id": mo_id,
        "employee_id": employee_id,
        "operation_type": "–æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
    }
    
    print("\n4. –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/operations/start", json=operation_start_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            operation_id = response.json().get('id', 1)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            operation_id = 1
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        operation_id = 1

    # 5. –ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_pause_data = {
        "operation_id": operation_id,
        "reason": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤"
    }
    
    print("\n5. –ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/operations/pause", json=operation_pause_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

    # 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation_complete_data = {
        "operation_id": operation_id,
        "result": "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    }
    
    print("\n6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/operations/complete", json=operation_complete_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")

    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    defect_data = {
        "manufacturing_order_id": mo_id,
        "operation_id": operation_id,
        "defect_type": "–±—Ä–∞–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
        "description": "–æ–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ—Ñ–µ–∫—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏",
        "severity": "—Å—Ä–µ–¥–Ω–∏–π"
    }
    
    print("\n7. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...")
    try:
        response = requests.post(f"{BASE_URL}/api/v1/defects", json=defect_data)
        if response.status_code in [200, 201]:
            print("‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")

    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ QR –∫–æ–¥–æ–≤
    print("\n8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤...")
    qr_endpoints = [
        f"/api/v1/qr/order/{order_id}",
        f"/api/v1/qr/employee/{employee_id}", 
        f"/api/v1/qr/mo/{mo_id}"
    ]
    
    for endpoint in qr_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}")
            if response.status_code == 200:
                print(f"‚úÖ {endpoint} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå {endpoint} - –æ—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"üö´ {endpoint} - –æ—à–∏–±–∫–∞: {e}")

    print("\nüéØ –ò–¢–û–ì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CRUD:")
    print("–ï—Å–ª–∏ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ - —Å–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –î–µ–Ω—å 3")

if __name__ == "__main__":
    test_crud_operations()
