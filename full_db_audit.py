#!/usr/bin/env python3
"""
FULL DB AUDIT: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü MES-—Å–∏—Å—Ç–µ–º—ã
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ë–î —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –î–Ω–µ–π 1‚Äì6.
"""
import asyncio
import asyncpg

# –¢—Ä–µ–±—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ó –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
REQUIRED_TABLES = {
    "operations": [
        "id", "manufacturing_order_id", "operation_number", "name", "description",
        "planned_duration", "actual_duration", "status", "assigned_employee_id",
        "started_at", "completed_at", "quality_check_passed", "notes", "created_at",
        "operation_type", "workcenter_id", "machine_id",
        "pause_duration", "pause_events", "planned_start", "planned_end",
        "actual_start", "actual_end"
    ],
    "manufacturing_orders": [
        "id", "order_id", "part_number", "status", "current_operation_id",
        "created_at", "updated_at"
    ],
    "machines": [
        "id", "name", "type", "location", "status", "last_heartbeat", "machine_token", "technical_docs"
    ],
    "employees": [
        "id", "first_name", "last_name", "qr_code", "role", "allowed_workcenters", "is_active"
    ],
    "audit_log": [
        "id", "user_id", "machine_id", "action", "ip_address", "timestamp", "data_snapshot"
    ]
}

async def main():
    conn = await asyncpg.connect(
        user='postgres',
        password='MesProject2025',
        database='mes_db',
        host='localhost'
    )
    
    print("=" * 70)
    print("üîç FULL DB AUDIT: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü MES")
    print("=" * 70)
    
    for table_name, required_columns in REQUIRED_TABLES.items():
        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        current_columns = await conn.fetch("""
            SELECT column_name FROM information_schema.columns
            WHERE table_name = $1 ORDER BY ordinal_position
        """, table_name)
        current_set = {row['column_name'] for row in current_columns}
        
        if not current_columns:
            print(f"  ‚ùå –¢–∞–±–ª–∏—Ü–∞ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
            continue
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(current_columns)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        missing = set(required_columns) - current_set
        if missing:
            print(f"  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(sorted(missing))}")
            print(f"  üí° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            for col in sorted(missing):
                if col in ["pause_events"]:
                    col_type = "JSONB"
                elif col in ["planned_start", "planned_end", "actual_start", "actual_end", "last_heartbeat", "timestamp", "created_at", "updated_at"]:
                    col_type = "TIMESTAMP WITH TIME ZONE"
                elif col in ["quality_check_passed", "is_active"]:
                    col_type = "BOOLEAN"
                elif col in ["pause_duration", "planned_duration", "actual_duration", "operation_number"]:
                    col_type = "INTEGER"
                else:
                    col_type = "VARCHAR"
                print(f"      ALTER TABLE {table_name} ADD COLUMN {col} {col_type};")
        else:
            print(f"  ‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ")
    
    await conn.close()
    print("\n" + "=" * 70)
    print("‚úÖ –ê–£–î–ò–¢ –ó–ê–í–ï–†–®–Å–ù")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
    print("=" * 70)

if __name__ == "__main__":
    asyncio.run(main())
