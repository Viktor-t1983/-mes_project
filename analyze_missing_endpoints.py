import os

def analyze_missing_endpoints():
    print("üîß –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 60)
    
    with open('main.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ POST —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –î–µ–Ω—å 3
    required_endpoints = {
        "POST": [
            ("/api/v1/employees", "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
            ("/api/v1/orders", "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"),
            ("/api/v1/mo", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"),
            ("/api/v1/defects", "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"),
            ("/api/v1/projects", "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"),
            ("/api/v1/operations", "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
            ("/api/v1/operations/start", "–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
            ("/api/v1/operations/pause", "–ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
            ("/api/v1/operations/complete", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        ]
    }
    
    missing_count = 0
    print("–û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï POST –≠–ù–î–ü–û–ò–ù–¢–´:")
    print("-" * 40)
    
    for method, endpoints in required_endpoints.items():
        for endpoint, description in endpoints:
            endpoint_pattern = f"@app.{method.lower()}('{endpoint}')"
            if endpoint_pattern in content:
                print(f"‚úÖ {method} {endpoint} - {description}")
            else:
                print(f"‚ùå {method} {endpoint} - {description}")
                missing_count += 1
    
    print(f"\nüìä –ò–¢–û–ì–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {missing_count} POST —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:")
    print("-" * 40)
    
    required_imports = [
        "EmployeeCreate", "ManufacturingOrderCreate", "OperationCreate",
        "DefectReportCreate", "OrderCreate", "ProjectCreate"
    ]
    
    for imp in required_imports:
        if imp in content:
            print(f"‚úÖ {imp}")
        else:
            print(f"‚ùå {imp}")
    
    return missing_count

if __name__ == "__main__":
    analyze_missing_endpoints()
