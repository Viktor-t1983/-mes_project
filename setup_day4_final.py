#!/usr/bin/env python3
"""FINAL MES Day 4 Setup - –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã"""

import os
import sys
import shutil
import ast
import asyncio
import subprocess
import platform
from datetime import datetime
from pathlib import Path

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
PROJECT_ROOT = Path(".").absolute()
print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {PROJECT_ROOT}")

def log_step(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {message}")

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    log_step("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # Python –≤–µ—Ä—Å–∏—è
    python_version = sys.version_info
    log_step(f"üêç Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    if python_version < (3, 8):
        log_step("[ERROR] –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    
    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    system = platform.system()
    log_step(f"üíª –û–°: {system} {platform.release()}")
    
    return True

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ MES"""
    log_step("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_dirs = [
        "src/models",
        "src/api", 
        "src/services",
        "src/integrations",
        "migrations/versions"
    ]
    
    required_files = [
        "main.py",
        "src/database.py",
        "src/models/base.py",
        "requirements.txt"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir_path in required_dirs:
        full_path = PROJECT_ROOT / dir_path
        full_path.mkdir(parents=True, exist_ok=True)
        if not full_path.exists():
            log_step(f"[OK] –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    missing_files = []
    for file_path in required_files:
        full_path = PROJECT_ROOT / file_path
        if not full_path.exists():
            missing_files.append(file_path)
    
    if missing_files:
        log_step(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    log_step("[OK] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    return True

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    log_step("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        "fastapi",
        "sqlalchemy",
        "alembic",
        "asyncpg",
        "psutil",
        "httpx",
        "pydantic",
        "python-dotenv"
    ]
    
    missing_deps = []
    for dep in dependencies:
        try:
            __import__(dep)
            log_step(f"[OK] {dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_deps.append(dep)
            log_step(f"[ERROR] {dep} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if missing_deps:
        log_step(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {missing_deps}")
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install"
            ] + missing_deps, check=True)
            log_step("[OK] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            log_step(f"[ERROR] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    return True

def check_postgresql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL"""
    log_step("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    postgres_commands = [
        ["pg_config", "--version"],
        ["psql", "--version"],
        ["postgres", "--version"]
    ]
    
    version_found = None
    for cmd in postgres_commands:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                version_output = result.stdout.strip()
                log_step(f"‚ÑπÔ∏è {version_output}")
                
                import re
                version_match = re.search(r'(\d+\.\d+)', version_output)
                if version_match:
                    version_found = float(version_match.group(1))
                    break
        except:
            continue
    
    if version_found:
        if version_found >= 13.0:
            log_step(f"[OK] PostgreSQL {version_found} - —Å–æ–≤–º–µ—Å—Ç–∏–º")
        else:
            log_step(f"[WARNING] PostgreSQL {version_found} - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 13+")
    else:
        log_step("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é PostgreSQL")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã
    try:
        if platform.system() == "Windows":
            result = subprocess.run(
                ["sc", "query", "postgresql"], 
                capture_output=True, text=True
            )
            if "RUNNING" in result.stdout:
                log_step("[OK] –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                log_step("[WARNING] –°–ª—É–∂–±–∞ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        else:
            result = subprocess.run(
                ["pg_isready"], 
                capture_output=True, text=True
            )
            if result.returncode == 0:
                log_step("[OK] PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                log_step("[WARNING] PostgreSQL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        log_step("[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å PostgreSQL")
    
    return True

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker"""
    log_step("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...")
    
    try:
        result = subprocess.run(
            ["docker", "--version"], 
            capture_output=True, text=True, check=True
        )
        log_step(f"[OK] {result.stdout.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
        try:
            compose_result = subprocess.run(
                ["docker-compose", "--version"], 
                capture_output=True, text=True
            )
            if compose_result.returncode == 0:
                log_step(f"[OK] {compose_result.stdout.strip()}")
        except:
            log_step("[WARNING] Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker daemon
        try:
            subprocess.run(["docker", "info"], capture_output=True, check=True)
            log_step("[OK] Docker daemon –∑–∞–ø—É—â–µ–Ω")
        except:
            log_step("[WARNING] Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
        return True
    except:
        log_step("[WARNING] Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def create_mes_models():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π MES"""
    log_step("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π MES...")
    
    # –ú–æ–¥–µ–ª—å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    gamification_model = '''
from sqlalchemy import Column, Integer, String, ForeignKey, Boolean, DateTime, Text
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from src.models.base import Base

class Achievement(Base):
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    __tablename__ = "achievements"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, nullable=False)
    description = Column(Text)
    points = Column(Integer, default=0)
    badge_icon = Column(String(50), default="üèÜ")
    is_active = Column(Boolean, default=True)

class EmployeeAchievement(Base):
    """–°–≤—è–∑—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""
    __tablename__ = "employee_achievements"
    
    id = Column(Integer, primary_key=True, index=True)
    employee_id = Column(Integer, ForeignKey("employees.id"), nullable=False)
    achievement_id = Column(Integer, ForeignKey("achievements.id"), nullable=False)
    awarded_at = Column(DateTime(timezone=True), server_default=func.now())
    is_rewarded = Column(Boolean, default=False)
    
    employee = relationship("Employee", backref="achievements")
    achievement = relationship("Achievement")

class Leaderboard(Base):
    """–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    __tablename__ = "leaderboard"
    
    id = Column(Integer, primary_key=True, index=True)
    employee_id = Column(Integer, ForeignKey("employees.id"), unique=True, nullable=False)
    total_points = Column(Integer, default=0)
    level = Column(Integer, default=1)
    last_updated = Column(DateTime(timezone=True), server_default=func.now())
    
    employee = relationship("Employee")
'''
    
    models_dir = PROJECT_ROOT / "src/models"
    with open(models_dir / "gamification.py", "w", encoding="utf-8") as f:
        f.write(gamification_model.strip())
    log_step("[OK] –ú–æ–¥–µ–ª—å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞")

def create_services():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    log_step("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –°–µ—Ä–≤–∏—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    gamification_service = '''
from sqlalchemy.orm import Session
from src.models.gamification import Achievement, EmployeeAchievement, Leaderboard
from src.models.employee import Employee

class GamificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    @staticmethod
    def award_achievement(db: Session, employee_id: int, achievement_name: str):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
        try:
            achievement = db.query(Achievement).filter(
                Achievement.name == achievement_name,
                Achievement.is_active == True
            ).first()
            
            if not achievement:
                print(f"[ERROR] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
            
            existing = db.query(EmployeeAchievement).filter(
                EmployeeAchievement.employee_id == employee_id,
                EmployeeAchievement.achievement_id == achievement.id
            ).first()
            
            if existing:
                print(f"‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_name}'")
                return True
            
            employee_achievement = EmployeeAchievement(
                employee_id=employee_id,
                achievement_id=achievement.id
            )
            db.add(employee_achievement)
            
            leaderboard = db.query(Leaderboard).filter(
                Leaderboard.employee_id == employee_id
            ).first()
            
            if leaderboard:
                leaderboard.total_points += achievement.points
                leaderboard.level = leaderboard.total_points // 100 + 1
            else:
                leaderboard = Leaderboard(
                    employee_id=employee_id,
                    total_points=achievement.points,
                    level=achievement.points // 100 + 1
                )
                db.add(leaderboard)
            
            db.commit()
            print(f"[OK] –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ '{achievement_name}' –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É #{employee_id}")
            return True
            
        except Exception as e:
            db.rollback()
            print(f"[ERROR] –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    def get_leaderboard(db: Session, limit: int = 10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        leaderboard = db.query(
            Leaderboard,
            Employee
        ).join(
            Employee, Leaderboard.employee_id == Employee.id
        ).order_by(
            Leaderboard.total_points.desc()
        ).limit(limit).all()
        
        result = []
        for rank, (lb, emp) in enumerate(leaderboard, 1):
            result.append({
                "rank": rank,
                "employee_name": f"{emp.first_name} {emp.last_name}",
                "total_points": lb.total_points,
                "level": lb.level,
                "badge_icon": "ü•á" if rank == 1 else "ü•à" if rank == 2 else "ü•â" if rank == 3 else "üèÖ"
            })
        
        return result
'''
    
    services_dir = PROJECT_ROOT / "src/services"
    with open(services_dir / "gamification_service.py", "w", encoding="utf-8") as f:
        f.write(gamification_service.strip())
    log_step("[OK] –°–µ—Ä–≤–∏—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")

def create_health_check():
    """–°–æ–∑–¥–∞–Ω–∏–µ health check endpoints"""
    log_step("üè• –°–æ–∑–¥–∞–Ω–∏–µ health check...")
    
    health_check = '''
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from src.database import get_db
import psutil
import os
import asyncpg
from typing import Dict, Any
import logging
from datetime import datetime

logger = logging.getLogger(__name__)
router = APIRouter(tags=["Health"])

async def check_database_connection() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db_url = os.getenv("DATABASE_URL")
        if not db_url:
            return {"status": "error", "message": "DATABASE_URL not configured"}
        
        conn = await asyncpg.connect(db_url, timeout=10)
        try:
            version = await conn.fetchval("SELECT version()")
            await conn.fetchval("SELECT 1")
            await conn.close()
            
            return {
                "status": "healthy",
                "version": version.split(',')[0] if version else "unknown"
            }
        except Exception as e:
            await conn.close()
            raise e
    except Exception as e:
        return {"status": "unhealthy", "message": str(e)}

@router.get("/health")
async def health_check():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        db_status = await check_database_connection()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        disk_usage = psutil.disk_usage("/")
        memory = psutil.virtual_memory()
        
        system_status = {
            "disk": {
                "free_gb": round(disk_usage.free / (1024**3), 2),
                "usage_percent": disk_usage.percent
            },
            "memory": {
                "usage_percent": memory.percent
            }
        }
        
        overall_status = "healthy" if db_status["status"] == "healthy" else "unhealthy"
        
        return {
            "status": overall_status,
            "timestamp": datetime.now().isoformat(),
            "services": {
                "database": db_status,
                "system": system_status
            }
        }
    except Exception as e:
        logger.critical(f"Health check critical error: {e}")
        return {
            "status": "unhealthy",
            "error": "System error",
            "timestamp": datetime.now().isoformat()
        }

@router.get("/ready")
async def readiness_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    return {"status": "ready"}

@router.get("/live")
async def liveness_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏"""
    return {"status": "live"}
'''
    
    api_dir = PROJECT_ROOT / "src/api"
    with open(api_dir / "health.py", "w", encoding="utf-8") as f:
        f.write(health_check.strip())
    log_step("[OK] Health check —Å–æ–∑–¥–∞–Ω")

def create_day4_endpoints():
    """–°–æ–∑–¥–∞–Ω–∏–µ endpoints –¥–ª—è 4 –¥–Ω—è"""
    log_step("üîó –°–æ–∑–¥–∞–Ω–∏–µ API endpoints...")
    
    endpoints = '''
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from src.database import get_db
from src.models.gamification import Achievement, EmployeeAchievement, Leaderboard
from src.schemas.gamification import AchievementCreate, Achievement, LeaderboardEntry
from src.services.gamification_service import GamificationService
from src.integrations.one_c_service import OneCIntegrationService
import os

router = APIRouter(prefix="/api/v1", tags=["Day 4 - Gamification & 1C"])

@router.post("/achievements", response_model=Achievement)
def create_achievement(achievement: AchievementCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    db_achievement = Achievement(**achievement.model_dump())
    db.add(db_achievement)
    db.commit()
    db.refresh(db_achievement)
    return db_achievement

@router.get("/achievements", response_model=List[Achievement])
def get_achievements(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    return db.query(Achievement).filter(Achievement.is_active == True).all()

@router.get("/leaderboard", response_model=List[LeaderboardEntry])
def get_leaderboard(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    return GamificationService.get_leaderboard(db)

@router.post("/1c/sync-invoice")
async def sync_invoice_to_1c(invoice_data: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å 1–°"""
    one_c_service = OneCIntegrationService(
        base_url=os.getenv("ONE_C_BASE_URL", "http://1c.yourcompany.local"),
        username=os.getenv("ONE_C_USERNAME", "mes_user"),
        password=os.getenv("ONE_C_PASSWORD", "secure_password")
    )
    
    success = await one_c_service.push_invoice_to_1c(invoice_data)
    return {"status": "success" if success else "failed"}
'''
    
    api_dir = PROJECT_ROOT / "src/api"
    with open(api_dir / "day4_endpoints.py", "w", encoding="utf-8") as f:
        f.write(endpoints.strip())
    log_step("[OK] Day 4 endpoints —Å–æ–∑–¥–∞–Ω—ã")

def update_main_py():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py"""
    log_step("[FIX] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py...")
    
    main_path = PROJECT_ROOT / "main.py"
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_path = main_path.with_suffix('.py.backup')
    if main_path.exists():
        shutil.copy(main_path, backup_path)
        log_step(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏ —Ä–æ—É—Ç–µ—Ä—ã
    new_imports = [
        "from src.api.health import router as health_router",
        "from src.api.day4_endpoints import router as day4_router"
    ]
    
    if main_path.exists():
        with open(main_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        for imp in new_imports:
            if imp not in content:
                # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
                lines = content.split('\n')
                for i, line in enumerate(lines):
                    if line.startswith('from src.api.') or line.startswith('from src.') and i > 0:
                        lines.insert(i + 1, imp)
                        log_step(f"[OK] –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç: {imp}")
                        break
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        if "app.include_router(health_router)" not in content:
            if "app.include_router" in content:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö include_router
                last_include = content.rfind("app.include_router")
                if last_include != -1:
                    line_end = content.find("\n", last_include)
                    if line_end != -1:
                        content = content[:line_end] + '\napp.include_router(health_router)' + content[line_end:]
                        log_step("[OK] Health router –¥–æ–±–∞–≤–ª–µ–Ω")
        
        if "app.include_router(day4_router)" not in content:
            if "app.include_router" in content:
                last_include = content.rfind("app.include_router")
                if last_include != -1:
                    line_end = content.find("\n", last_include)
                    if line_end != -1:
                        content = content[:line_end] + '\napp.include_router(day4_router)' + content[line_end:]
                        log_step("[OK] Day4 router –¥–æ–±–∞–≤–ª–µ–Ω")
        
        with open(main_path, "w", encoding="utf-8") as f:
            f.write(content)
    else:
        log_step("[WARNING] main.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π")
        basic_main = '''
from fastapi import FastAPI
from src.api.health import router as health_router
from src.api.day4_endpoints import router as day4_router

app = FastAPI(title="MES System", version="1.0.0")

app.include_router(health_router)
app.include_router(day4_router)

@app.get("/")
async def root():
    return {"message": "MES System API"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''
        with open(main_path, "w", encoding="utf-8") as f:
            f.write(basic_main.strip())

async def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    log_step("üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º .env –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    env_path = PROJECT_ROOT / ".env"
    if not env_path.exists():
        env_content = '''
DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/mes_db
ONE_C_BASE_URL=http://1c.yourcompany.local
ONE_C_USERNAME=mes_user
ONE_C_PASSWORD=secure_password
DEBUG=true
'''
        with open(env_path, "w", encoding="utf-8") as f:
            f.write(env_content.strip())
        log_step("[OK] –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º alembic.ini –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    alembic_ini = PROJECT_ROOT / "alembic.ini"
    if not alembic_ini.exists():
        alembic_content = '''
[alembic]
script_location = migrations
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d%%(second).2d_%%(slug)s
sqlalchemy.url = postgresql+asyncpg://user:pass@localhost/dbname

[loggers]
keys = root

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
'''
        with open(alembic_ini, "w", encoding="utf-8") as f:
            f.write(alembic_content.strip())
        log_step("[OK] –§–∞–π–ª alembic.ini —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        import asyncpg
        db_url = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:postgres@localhost:5432/mes_db")
        conn = await asyncpg.connect(db_url, timeout=10)
        await conn.close()
        log_step("[OK] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        log_step("üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        try:
            subprocess.run(["alembic", "revision", "--autogenerate", "-m", "day4_setup"], check=True)
            subprocess.run(["alembic", "upgrade", "head"], check=True)
            log_step("[OK] –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        except subprocess.CalledProcessError as e:
            log_step(f"[WARNING] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
            log_step("üí° –°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é: alembic revision --autogenerate -m 'day4' && alembic upgrade head")
        
    except Exception as e:
        log_step(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        log_step("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    log_step("üìú –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    scripts_dir = PROJECT_ROOT / "scripts"
    scripts_dir.mkdir(exist_ok=True)
    
    # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ development
    dev_script = '''#!/bin/bash
echo "[LAUNCH] –ó–∞–ø—É—Å–∫ MES Development..."
uvicorn main:app --reload --host 0.0.0.0 --port 8000
'''
    with open(scripts_dir / "start-dev.sh", "w", encoding="utf-8") as f:
        f.write(dev_script.strip())
    if platform.system() != "Windows":
        subprocess.run(["chmod", "+x", scripts_dir / "start-dev.sh"])
    
    # –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –ë–î
    backup_script = '''#!/bin/bash
echo "üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î MES..."
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
pg_dump -h localhost -U postgres mes_db > backups/mes_backup_${TIMESTAMP}.sql
echo "[OK] –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backups/mes_backup_${TIMESTAMP}.sql"
'''
    with open(scripts_dir / "backup-db.sh", "w", encoding="utf-8") as f:
        f.write(backup_script.strip())
    if platform.system() != "Windows":
        subprocess.run(["chmod", "+x", scripts_dir / "backup-db.sh"])
    
    log_step("[OK] –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("[LAUNCH] FINAL MES DAY 4 SETUP")
    print("=" * 60)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    steps = [
        check_system_requirements,
        check_project_structure,
        check_and_install_dependencies,
        check_postgresql,
        check_docker,
        create_mes_models,
        create_services,
        create_health_check,
        create_day4_endpoints,
        update_main_py,
        lambda: asyncio.create_task(setup_database()),
        create_scripts
    ]
    
    for step in steps:
        try:
            if asyncio.iscoroutinefunction(step):
                await step()
            else:
                step()
        except Exception as e:
            log_step(f"[ERROR] –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ {step.__name__}: {e}")
            continue
    
    print("\\n" + "=" * 60)
    print("[SUCCESS] –ù–ê–°–¢–†–û–ô–ö–ê MES –î–ï–ù–¨ 4 –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\\n[OK] –ß–¢–û –ë–´–õ–û –°–î–ï–õ–ê–ù–û:")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ API endpoints")
    print("   ‚Ä¢ Health check endpoints")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏–π")
    print("   ‚Ä¢ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã")
    print("\\n[LAUNCH] –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
    print("   –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞: python main.py")
    print("   Production: uvicorn main:app --host 0.0.0.0 --port 8000")
    print("   –ú–∏–≥—Ä–∞—Ü–∏–∏:   alembic upgrade head")
    print("\\nüìä –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´:")
    print("   Health:      curl http://localhost:8000/health")
    print("   Achievements: curl http://localhost:8000/api/v1/achievements")
    print("   Leaderboard: curl http://localhost:8000/api/v1/leaderboard")

if __name__ == "__main__":
    asyncio.run(main())
