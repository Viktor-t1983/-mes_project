#!/usr/bin/env python3
"""
–°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python-—Ñ–∞–π–ª–æ–≤.
"""
import ast
import os
import sys

def check_file_syntax(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            source = f.read()
        ast.parse(source, filename=filepath)
        print(f"‚úÖ {filepath}")
        return True
    except SyntaxError as e:
        print(f"‚ùå {filepath}:{e.lineno}:{e.offset} ‚Äî {e.msg}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è  {filepath} ‚Äî {e}")
        return False

def main():
    project_root = "."
    error_count = 0
    total_count = 0

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤—Å–µ—Ö Python-—Ñ–∞–π–ª–æ–≤...\n")

    for root, _, files in os.walk(project_root):
        for file in files:
            if file.endswith(".py") and "venv" not in root:
                filepath = os.path.join(root, file)
                total_count += 1
                if not check_file_syntax(filepath):
                    error_count += 1

    print(f"\nüìä –ò—Ç–æ–≥: {total_count - error_count}/{total_count} —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫")
    if error_count > 0:
        print("üö® –ù–∞–π–¥–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.")
        sys.exit(1)
    else:
        print("üéâ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

if __name__ == "__main__":
    main()
