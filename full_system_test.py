#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• 8 –î–ù–ï–ô MES-–°–ò–°–¢–ï–ú–´
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: —è–¥—Ä–æ ‚Üí –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí –º–æ–±–∏–ª—å–Ω–æ–µ API ‚Üí IIoT ‚Üí –∞—É–¥–∏—Ç ‚Üí BPM ‚Üí LMS
"""
import asyncio
import httpx
from datetime import datetime

BASE_URL = "http://localhost:8000"

async def test_day1_core():
    """–î–µ–Ω—å 1: –Ø–¥—Ä–æ (Order, Project)"""
    print("üîç –î–µ–Ω—å 1: –Ø–¥—Ä–æ...")
    async with httpx.AsyncClient() as client:
        project_name = f"TestProject_{int(datetime.now().timestamp())}"
        proj = await client.post(f"{BASE_URL}/api/v1/projects/", json={"name": project_name})
        assert proj.status_code == 201, f"Project create failed: {proj.status_code}"
        project_id = proj.json()["id"]

        order = await client.post(f"{BASE_URL}/api/v1/orders/", json={
            "name": "TestOrder",
            "product_name": "Widget",
            "quantity": 10,
            "project_id": project_id
        })
        assert order.status_code == 201, f"Order create failed: {order.status_code}"
        print("‚úÖ –î–µ–Ω—å 1: –ø—Ä–æ–π–¥–µ–Ω")
        return project_id

async def test_day2_gamification():
    """–î–µ–Ω—å 2: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è"""
    print("üîç –î–µ–Ω—å 2: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è...")
    async with httpx.AsyncClient() as client:
        qr_code = f"TEST_QR_{int(datetime.now().timestamp())}"
        emp = await client.post(f"{BASE_URL}/api/v1/employees/", json={
            "first_name": "Test",
            "last_name": "Operator",
            "role": "operator",
            "qr_code": qr_code
        })
        assert emp.status_code == 201, f"Employee create failed: {emp.status_code}"
        print("‚úÖ –î–µ–Ω—å 2: –ø—Ä–æ–π–¥–µ–Ω")

async def test_day3_mobile():
    """–î–µ–Ω—å 3: –ú–æ–±–∏–ª—å–Ω–æ–µ API"""
    print("üîç –î–µ–Ω—å 3: –ú–æ–±–∏–ª—å–Ω–æ–µ API...")
    async with httpx.AsyncClient() as client:
        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –≤–º–µ—Å—Ç–æ GET
        resp = await client.post(
            f"{BASE_URL}/mobile/scan-start",
            json={"qr_code": "TEST_QR_001", "part_number": "PART-001"}
        )
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 200 –∏–ª–∏ 403 (–Ω–æ –Ω–µ 404/405)
        assert resp.status_code in (200, 403), f"Mobile API failed: {resp.status_code}"
        print("‚úÖ –î–µ–Ω—å 3: –ø—Ä–æ–π–¥–µ–Ω")

async def test_day4_iiot():
    """–î–µ–Ω—å 4: IIoT –∏ OEE"""
    print("üîç –î–µ–Ω—å 4: IIoT –∏ OEE...")
    async with httpx.AsyncClient() as client:
        hb = await client.post(
            f"{BASE_URL}/api/v1/iiot/heartbeat",
            json={"event_type": "test", "payload": {"status": "online"}},
            headers={"X-Machine-Token": "test_token"}
        )
        assert hb.status_code == 200, f"Heartbeat failed: {hb.status_code}"
        print("‚úÖ –î–µ–Ω—å 4: –ø—Ä–æ–π–¥–µ–Ω")

async def test_day5_audit():
    """–î–µ–Ω—å 5: –ê—É–¥–∏—Ç"""
    print("üîç –î–µ–Ω—å 5: –ê—É–¥–∏—Ç...")
    async with httpx.AsyncClient() as client:
        audit = await client.get(f"{BASE_URL}/api/v1/audit/")
        assert audit.status_code == 200, f"Audit failed: {audit.status_code}"
        print("‚úÖ –î–µ–Ω—å 5: –ø—Ä–æ–π–¥–µ–Ω")

async def test_day6_bpm():
    """–î–µ–Ω—å 6: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä BPM"""
    print("üîç –î–µ–Ω—å 6: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä BPM...")
    async with httpx.AsyncClient() as client:
        proc = await client.post(f"{BASE_URL}/api/v1/meta/processes", json={
            "name": f"TestProcess_{int(datetime.now().timestamp())}",
            "steps": [{
                "step_order": 1,
                "name": "Step1",
                "action_type": "form",
                "config": {}
            }]
        })
        assert proc.status_code == 201, f"BPM create failed: {proc.status_code}"
        print("‚úÖ –î–µ–Ω—å 6: –ø—Ä–æ–π–¥–µ–Ω")

async def test_day7_lms():
    """–î–µ–Ω—å 7: LMS –∏ –¥–æ–ø—É—Å–∫–∏"""
    print("üîç –î–µ–Ω—å 7: LMS –∏ –¥–æ–ø—É—Å–∫–∏...")
    async with httpx.AsyncClient() as client:
        course_name = f"TestCourse_{int(datetime.now().timestamp())}"
        course = await client.post(f"{BASE_URL}/api/v1/lms/courses", json={
            "name": course_name,
            "operation_type": "test_op",
            "workcenter_id": "WC-001"
        })
        assert course.status_code == 201, f"Course create failed: {course.status_code}"
        course_id = course.json()["id"]

        auth = await client.get(f"{BASE_URL}/api/v1/lms/authorize?employee_id=1&workcenter_id=WC-001&operation_type=test_op")
        assert auth.status_code == 200, f"Auth check failed: {auth.status_code}"
        print("‚úÖ –î–µ–Ω—å 7: –ø—Ä–æ–π–¥–µ–Ω")
        return course_id

async def test_day8_override():
    """–î–µ–Ω—å 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
    print("üîç –î–µ–Ω—å 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞...")
    async with httpx.AsyncClient() as client:
        master_qr = f"MASTER_QR_{int(datetime.now().timestamp())}"
        master = await client.post(f"{BASE_URL}/api/v1/employees/", json={
            "first_name": "Test",
            "last_name": "Foreman",
            "role": "foreman",
            "qr_code": master_qr
        })
        assert master.status_code == 201, f"Master create failed: {master.status_code}"

        override = await client.post(
            f"{BASE_URL}/api/v1/lms/override?employee_id=1&workcenter_id=WC-999&operation_type=test_op",
            json={"master_qr_code": master_qr, "reason": "Test override"}
        )
        assert override.status_code == 202, f"Override failed: {override.status_code}"
        print("‚úÖ –î–µ–Ω—å 8: –ø—Ä–æ–π–¥–µ–Ω")

async def main():
    print("="*60)
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –í–°–ï–• 8 –î–ù–ï–ô")
    print("="*60)
    
    try:
        project_id = await test_day1_core()
        await test_day2_gamification()
        await test_day3_mobile()
        await test_day4_iiot()
        await test_day5_audit()
        await test_day6_bpm()
        course_id = await test_day7_lms()
        await test_day8_override()
        
        print("\nüéâ –í–°–ï 8 –î–ù–ï–ô –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ MES-—Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ production.")
        
    except Exception as e:
        print(f"\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        exit(1)

if __name__ == "__main__":
    asyncio.run(main())
