#!/usr/bin/env python3
import asyncio
import httpx
import os
import sys
from datetime import datetime

BASE_URL = "http://localhost:8000"

def check_security():
    print("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    if ".env" not in open(".gitignore").read():
        return False
    for root, _, files in os.walk("src"):
        for f in files:
            if f.endswith(".py"):
                content = open(os.path.join(root, f), "r", encoding="utf-8", errors="ignore").read()
                if "MesProject2025" in content:
                    return False
    print("‚úÖ –°–µ–∫—Ä–µ—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –∏–∑ –∫–æ–¥–∞")
    return True

async def e2e_shipment_test():
    print("üì¶ –ó–∞–ø—É—Å–∫ —Å–∫–≤–æ–∑–Ω–æ–≥–æ E2E-—Ç–µ—Å—Ç–∞...")
    async with httpx.AsyncClient(timeout=15.0) as client:
        # –ü—Ä–æ–µ–∫—Ç
        proj = await client.post(f"{BASE_URL}/api/v1/projects/", json={"name": f"E2E_{int(datetime.now().timestamp())}"})
        assert proj.status_code == 201
        project_id = proj.json()["id"]

        # –ó–∞–∫–∞–∑
        order = await client.post(f"{BASE_URL}/api/v1/orders/", json={
            "name": "E2E Test Order",
            "product_name": "PART-E2E",
            "quantity": 1,
            "project_id": project_id
        })
        assert order.status_code == 201
        order_id = order.json()["id"]

        # –û—Ç–≥—Ä—É–∑–∫–∞ ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        ship = await client.post(f"{BASE_URL}/api/v1/shipments/", json={
            "project_id": project_id,
            "manufacturing_order_id": 1,
            "invoice_number": f"INV-{int(datetime.now().timestamp())}",
            "order_id": order_id,
            "status": "created"
        })
        assert ship.status_code == 201

        print("‚úÖ E2E-—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        return True

async def main():
    print("=" * 70)
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò MES –ö PRODUCTION (–î–Ω–∏ 1‚Äì13)")
    print("=" * 70)

    if not check_security():
        sys.exit(1)

    try:
        await e2e_shipment_test()
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ MES-—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
