#!/usr/bin/env python3
"""
–î–ï–ù–¨ 6: IIoT + –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ —Å—Ç–∞–Ω–∫–∞ + –ê—É–¥–∏—Ç
Senior Security Engineer Edition
"""
import os
import sys
import shutil
from pathlib import Path

PROJECT_ROOT = Path(".").resolve()

def write_file(path: str, content: str):
    full_path = PROJECT_ROOT / path
    full_path.parent.mkdir(parents=True, exist_ok=True)
    with open(full_path, "w", encoding="utf-8") as f:
        f.write(content.strip() + "\n")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {path}")

def backup_file(path: str):
    src = PROJECT_ROOT / path
    if src.exists():
        shutil.copy(src, src.with_suffix(src.suffix + ".bak"))
        print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {path}.bak")

# === 1. –ú–æ–¥–µ–ª—å —Å—Ç–∞–Ω–∫–∞ ===
write_file("src/models/machine.py", '''
from sqlalchemy import Column, Integer, String, DateTime, Text, Boolean, ForeignKey
from sqlalchemy.sql import func
from .base import Base

class Machine(Base):
    __tablename__ = "machines"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)              # "–¢–æ–∫–∞—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ 1–ö62"
    type = Column(String, nullable=False)              # "lathe", "milling", "laser"
    location = Column(String)                          # "–¶–µ—Ö 1, –õ–∏–Ω–∏—è A"
    status = Column(String, default="online")          # online, offline, maintenance
    last_heartbeat = Column(DateTime(timezone=True), default=func.now())
    machine_token = Column(String, unique=True)        # –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞–Ω–∫–æ–≤
    technical_docs = Column(Text)                      # JSON —Å URL –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
''')

# === 2. –ê—É–¥–∏—Ç-–ª–æ–≥ ===
write_file("src/models/audit_log.py", '''
from sqlalchemy import Column, Integer, String, DateTime, Text, ForeignKey
from sqlalchemy.sql import func
from .base import Base

class AuditLog(Base):
    __tablename__ = "audit_log"

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=True)           # None –¥–ª—è —Å—Ç–∞–Ω–∫–æ–≤
    machine_id = Column(Integer, nullable=True)        # None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    action = Column(String, nullable=False)            # "operation_start", "defect_reported"
    ip_address = Column(String)
    timestamp = Column(DateTime(timezone=True), default=func.now())
    data_snapshot = Column(Text)                       # JSON —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
''')

# === 3. –°—Ö–µ–º—ã Pydantic ===
write_file("src/schemas/machine.py", '''
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class MachineBase(BaseModel):
    name: str
    type: str
    location: Optional[str] = None
    technical_docs: Optional[str] = None

class MachineCreate(MachineBase):
    machine_token: str

class Machine(MachineBase):
    id: int
    status: str
    last_heartbeat: datetime

    class Config:
        from_attributes = True
''')

write_file("src/schemas/audit_log.py", '''
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class AuditLogBase(BaseModel):
    user_id: Optional[int] = None
    machine_id: Optional[int] = None
    action: str
    ip_address: str
    data_snapshot: str

class AuditLog(AuditLogBase):
    id: int
    timestamp: datetime

    class Config:
        from_attributes = True
''')

# === 4. –°–µ—Ä–≤–∏—Å —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞ ===
write_file("src/services/digital_twin.py", '''
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from src.models.machine import Machine
from src.models.operation import Operation
from datetime import datetime, timedelta

async def calculate_oee(db: AsyncSession, machine_id: int) -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç OEE –¥–ª—è —Å—Ç–∞–Ω–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
    now = datetime.utcnow()
    start = now - timedelta(hours=24)

    # –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è (24*60 –º–∏–Ω)
    available_time = 24 * 60

    # –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ–µ–≤ (–ø–∞—É–∑—ã)
    stmt = select(func.sum(Operation.pause_duration)).where(
        Operation.machine_id == machine_id,
        Operation.planned_start >= start
    )
    result = await db.execute(stmt)
    downtime = result.scalar() or 0

    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    operating_time = available_time - downtime

    # –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–±–µ–∑ –±—Ä–∞–∫–∞)
    stmt = select(func.sum(Operation.planned_duration)).where(
        Operation.machine_id == machine_id,
        Operation.planned_start >= start,
        Operation.status == "completed"
    )
    result = await db.execute(stmt)
    ideal_time = result.scalar() or 0

    # –†–∞—Å—á—ë—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    availability = operating_time / available_time if available_time > 0 else 0
    performance = ideal_time / operating_time if operating_time > 0 else 0
    quality = 0.95  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ; –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —á–µ—Ä–µ–∑ defect_reports

    oee = availability * performance * quality

    return {
        "oee": round(oee * 100, 2),
        "availability": round(availability * 100, 2),
        "performance": round(performance * 100, 2),
        "quality": round(quality * 100, 2),
        "downtime_minutes": downtime
    }
''')

# === 5. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã IIoT ===
write_file("src/api/v1/iiot.py", '''
from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession
from src.core.database import get_db
from src.models.machine import Machine
from src.services.digital_twin import calculate_oee
from src.models.audit_log import AuditLog
import json

router = APIRouter(prefix="/api/v1/iiot", tags=["IIoT"])

@router.post("/heartbeat")
async def machine_heartbeat(
    request: Request,
    machine_token: str,
    event_type: str = "heartbeat",
    payload: dict = None,
    db: AsyncSession = Depends(get_db)
):
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç–∞–Ω–∫–∞
    machine = await db.execute(
        "SELECT * FROM machines WHERE machine_token = :token",
        {"token": machine_token}
    )
    machine = machine.fetchone()
    if not machine:
        raise HTTPException(401, "Invalid machine token")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    await db.execute(
        "UPDATE machines SET last_heartbeat = NOW(), status = 'online' WHERE id = :id",
        {"id": machine.id}
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    log_entry = AuditLog(
        machine_id=machine.id,
        action=f"machine_{event_type}",
        ip_address=request.client.host,
        data_snapshot=json.dumps(payload or {})
    )
    db.add(log_entry)
    await db.commit()

    return {"status": "ok", "machine_id": machine.id}

@router.get("/oee/{machine_id}")
async def get_machine_oee(machine_id: int, db: AsyncSession = Depends(get_db)):
    return await calculate_oee(db, machine_id)
''')

# === 6. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É–¥–∏—Ç–∞ ===
write_file("src/api/v1/audit.py", '''
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from src.core.database import get_db
from src.models.audit_log import AuditLog
from src.schemas.audit_log import AuditLog as AuditLogSchema

router = APIRouter(prefix="/api/v1/audit", tags=["Audit"])

@router.get("/", response_model=list[AuditLogSchema])
async def get_audit_logs(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db)
):
    result = await db.execute(
        select(AuditLog).offset(skip).limit(limit).order_by(AuditLog.timestamp.desc())
    )
    return result.scalars().all()
''')

# === 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
req_path = PROJECT_ROOT / "requirements.txt"
with open(req_path, "a", encoding="utf-8") as f:
    if "structlog" not in open(req_path, encoding="utf-8").read():
        f.write("\nstructlog==24.1.0\ncryptography==41.0.7\n")
print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")

# === 8. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ main.py ===
backup_file("main.py")
with open(PROJECT_ROOT / "main.py", "r", encoding="utf-8") as f:
    content = f.read()

if "iiot_router" not in content:
    new_imports = '''
# –î–µ–Ω—å 6: IIoT –∏ –ê—É–¥–∏—Ç
try:
    from src.api.v1.iiot import router as iiot_router
    app.include_router(iiot_router)
    print("[OK] IIoT router connected")
except Exception as e:
    print(f"[ERROR] IIoT router: {e}")

try:
    from src.api.v1.audit import router as audit_router
    app.include_router(audit_router)
    print("[OK] Audit router connected")
except Exception as e:
    print(f"[ERROR] Audit router: {e}")
'''
    content = content.rstrip() + "\n" + new_imports

with open(PROJECT_ROOT / "main.py", "w", encoding="utf-8") as f:
    f.write(content)

print("\nüöÄ –î–ï–ù–¨ 6: IIoT + –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ + –ê—É–¥–∏—Ç ‚Äî –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù!")
print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
print("1. pip install -r requirements.txt")
print("2. alembic revision --autogenerate -m 'day6_iiot'")
print("3. alembic upgrade head")
print("4. uvicorn main:app --reload")
print("\nüîç –ù–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
print(" ‚Ä¢ POST /api/v1/iiot/heartbeat")
print(" ‚Ä¢ GET /api/v1/iiot/oee/{machine_id}")
print(" ‚Ä¢ GET /api/v1/audit")
