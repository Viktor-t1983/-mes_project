import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def fix_data():
    db_url = os.getenv("DATABASE_URL")
    if "asyncpg" in db_url:
        db_url = db_url.replace("postgresql+asyncpg://", "postgresql://")
    
    print("üõ† –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ë–ê–ó–ï")
    print("=" * 35)
    
    try:
        conn = psycopg2.connect(db_url)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ orders
        print("\nüìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders...")
        cursor.execute("""
            UPDATE orders 
            SET 
                name = COALESCE(name, '–ó–∞–∫–∞–∑ ' || id::text),
                description = COALESCE(description, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ' || id::text),
                project_id = COALESCE(project_id, 1)
            WHERE name IS NULL OR description IS NULL
        """)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ orders: {cursor.rowcount}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ operations
        print("üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É operations...")
        cursor.execute("""
            UPDATE operations 
            SET 
                planned_duration = COALESCE(planned_duration, 60.0),
                actual_duration = COALESCE(actual_duration, 0.0),
                operation_type = COALESCE(operation_type, 'production'),
                workcenter_id = COALESCE(workcenter_id, 1)
            WHERE planned_duration IS NULL
        """)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ operations: {cursor.rowcount}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ employees (allowed_workcenters)
        print("üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É employees...")
        cursor.execute("""
            UPDATE employees 
            SET allowed_workcenters = '[]'::jsonb
            WHERE allowed_workcenters IS NULL
        """)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ employees: {cursor.rowcount}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–•:")
        
        cursor.execute("SELECT COUNT(*) FROM orders WHERE name IS NULL OR description IS NULL")
        null_orders = cursor.fetchone()[0]
        print(f"üìä Orders —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {null_orders}")
        
        cursor.execute("SELECT COUNT(*) FROM operations WHERE planned_duration IS NULL")
        null_operations = cursor.fetchone()[0]
        print(f"üìä Operations —Å NULL planned_duration: {null_operations}")
        
        cursor.execute("SELECT COUNT(*) FROM employees WHERE allowed_workcenters IS NULL")
        null_employees = cursor.fetchone()[0]
        print(f"üìä Employees —Å NULL allowed_workcenters: {null_employees}")
        
        print("\nüéâ –î–ê–ù–ù–´–ï –í –ë–ê–ó–ï –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    fix_data()
