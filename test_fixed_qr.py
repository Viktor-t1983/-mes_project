import requests
import time

BASE_URL = "http://localhost:8000"

def test_fixed_qr_endpoints():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• QR-–ö–û–î–û–í")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    print("1. üìù –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•:")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        employee_response = requests.post(f"{BASE_URL}/api/v1/employees", params={
            "first_name": "–¢–µ—Å—Ç",
            "last_name": "QR-–°–æ—Ç—Ä—É–¥–Ω–∏–∫", 
            "role": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"
        })
        
        if employee_response.status_code == 200:
            employee_id = employee_response.json()['id']
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞: ID {employee_id}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employees_response = requests.get(f"{BASE_URL}/api/v1/employees")
            if employees_response.status_code == 200:
                employees = employees_response.json()
                if employees:
                    employee_id = employees[0]['id']
                    print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: ID {employee_id}")
                else:
                    print("   ‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
                    return
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º MO –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        mo_response = requests.post(f"{BASE_URL}/api/v1/mo", params={
            "order_number": "QR-TEST-001",
            "product_name": "–¢–µ—Å—Ç QR MO",
            "product_code": "QR-TEST",
            "quantity": 1
        })
        
        if mo_response.status_code == 200:
            mo_id = mo_response.json()['id']
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ MO –¥–ª—è —Ç–µ—Å—Ç–∞: ID {mo_id}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ MO
            mo_list_response = requests.get(f"{BASE_URL}/api/v1/mo")
            if mo_list_response.status_code == 200:
                mo_list = mo_list_response.json()
                if mo_list:
                    mo_id = mo_list[0]['id']
                    print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ MO: ID {mo_id}")
                else:
                    print("   ‚ùå –ù–µ—Ç MO –¥–ª—è —Ç–µ—Å—Ç–∞")
                    return
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ MO: {e}")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ QR-–∫–æ–¥—ã
    print("\n2. üì± –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• QR-–ö–û–î–û–í:")
    
    test_cases = [
        ('order', 1, "–ó–∞–∫–∞–∑"),
        ('employee', employee_id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"),
        ('mo', mo_id, "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
    ]
    
    all_success = True
    
    for entity, entity_id, description in test_cases:
        try:
            response = requests.get(f"{BASE_URL}/api/v1/qr/{entity}/{entity_id}")
            print(f"   QR {description} (ID {entity_id}): {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"      ‚úÖ –£—Å–ø–µ—Ö: {data['qr_data']}")
                print(f"      üìã –î–∞–Ω–Ω—ã–µ: {data['entity_name']}")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {response.text}")
                all_success = False
                
        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞ QR {description}: {e}")
            all_success = False
    
    print("\n" + "=" * 50)
    if all_success:
        print("üéâ –í–°–ï QR-–ö–û–î–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ QR-–∫–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    test_fixed_qr_endpoints()
