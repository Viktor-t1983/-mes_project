import requests
import os

def generate_final_report():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø '–î–ï–ù–¨ 3: –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ï –Ø–î–†–û'")
    print("=" * 70)
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –î–µ–Ω—å 3
    requirements = {
        "üîπ –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•": {
            "Employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
            "ManufacturingOrder": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", 
            "Operation": "–û–ø–µ—Ä–∞—Ü–∏–∏",
            "DefectReport": "–û—Ç—á–µ—Ç—ã –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö"
        },
        "üîπ –°–•–ï–ú–´ PYDANTIC": {
            "employee.py": "–°—Ö–µ–º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "manufacturing_order.py": "–°—Ö–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "operation.py": "–°—Ö–µ–º—ã –æ–ø–µ—Ä–∞—Ü–∏–π", 
            "defect_report.py": "–°—Ö–µ–º—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤"
        },
        "üîπ –£–¢–ò–õ–ò–¢–´": {
            "qrcode_generator.py": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR-–∫–æ–¥–æ–≤"
        },
        "üîπ –ö–õ–Æ–ß–ï–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´": {
            "POST /api/v1/mo": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
            "POST /api/v1/operations/start": "–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "POST /api/v1/operations/pause": "–ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", 
            "POST /api/v1/operations/complete": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "POST /api/v1/defects": "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
            "GET /api/v1/qr/{entity}/{id}": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–æ–≤"
        },
        "üîπ –ú–ò–ì–†–ê–¶–ò–ò": {
            "migrations/ folder": "–ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π Alembic",
            "alembic.ini": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic"
        }
    }
    
    compliance_score = 0
    total_requirements = 0
    
    for category, items in requirements.items():
        print(f"\n{category}")
        print("-" * 40)
        
        for item, description in items.items():
            total_requirements += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
            if item.endswith('.py') or 'folder' in item:
                if os.path.exists(item.replace('folder', '')):
                    print(f"  ‚úÖ {description}")
                    compliance_score += 1
                else:
                    print(f"  ‚ùå {description}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            elif item.startswith(('GET', 'POST')):
                method, endpoint = item.split(' ')
                try:
                    if method == 'GET':
                        response = requests.get(f"http://localhost:8000{endpoint.replace('{id}', '1').replace('{entity}', 'order')}")
                    else:
                        response = requests.post(f"http://localhost:8000{endpoint}", json={})
                    
                    if response.status_code in [200, 201, 422]:  # 422 - validation error, but endpoint exists
                        print(f"  ‚úÖ {description}")
                        compliance_score += 1
                    else:
                        print(f"  ‚ö†Ô∏è  {description} (–∫–æ–¥: {response.status_code})")
                except:
                    print(f"  ‚ùå {description}")
    
    # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    compliance_percentage = (compliance_score / total_requirements) * 100
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {compliance_score}/{total_requirements}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {compliance_percentage:.1f}%")
    
    print(f"\nüéØ –í–ï–†–î–ò–ö–¢ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–ï–ù–¨ 3:")
    if compliance_percentage >= 90:
        print("   ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —è–¥—Ä–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ!")
    elif compliance_percentage >= 70:
        print("   ‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ - –¢—Ä–µ–±—É—é—Ç—Å—è minor –¥–æ—Ä–∞–±–æ—Ç–∫–∏")  
    else:
        print("   ‚ùå –ù–ï –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ - –¢—Ä–µ–±—É–µ—Ç—Å—è significant —Ä–∞–±–æ—Ç–∞")
    
    print(f"\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if compliance_percentage < 100:
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ src/models/")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ main.py")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤ .env —Ñ–∞–π–ª–µ")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
    else:
        print("   üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –î–µ–Ω—å 4!")

if __name__ == "__main__":
    generate_final_report()
