import requests
import json

BASE_URL = "http://localhost:8000"

def test_100_percent():
    print("üèÜ –¢–ï–°–¢ –î–õ–Ø 100% –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    print("=" * 50)
    
    results = []
    
    # 1. Health check
    print("1. ü©∫ HEALTH CHECK...")
    try:
        response = requests.get(f"{BASE_URL}/api/v1/health", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results.append(("Health Check", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            results.append(("Health Check", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return results
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò —Å—Ö–µ–º–∞–º–∏
    print("\n2. üìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–•...")
    
    test_cases = [
        ("/api/v1/employees", {
            "first_name": "–ò–≤–∞–Ω", 
            "last_name": "–ò–≤–∞–Ω–æ–≤", 
            "role": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
            "qr_code": "EMP001"
        }, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"),
        
        ("/api/v1/orders", {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞", 
            "product_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
            "quantity": 10
        }, "–ó–∞–∫–∞–∑"),
        
        ("/api/v1/mo", {
            "order_number": "MO-001",
            "product_name": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –ø—Ä–æ–¥—É–∫—Ç",
            "product_code": "PROD-001", 
            "quantity": 5
        }, "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"),
        
        ("/api/v1/operations", {
            "manufacturing_order_id": 1,
            "operation_number": "OP-001",
            "name": "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "planned_duration": 60
        }, "–û–ø–µ—Ä–∞—Ü–∏—è"),
        
        ("/api/v1/defects", {
            "manufacturing_order_id": 1,
            "reported_by": 1,
            "defect_type": "–ö–∞—á–µ—Å—Ç–≤–æ",
            "defect_description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
            "severity": "medium"
        }, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"),
        
        ("/api/v1/projects", {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
        }, "–ü—Ä–æ–µ–∫—Ç")
    ]
    
    created_ids = {}
    
    for endpoint, data, description in test_cases:
        try:
            response = requests.post(f"{BASE_URL}{endpoint}", json=data, timeout=10)
            if response.status_code == 200:
                result_data = response.json()
                entity_id = result_data.get("id")
                if entity_id:
                    created_ids[description] = entity_id
                print(f"   ‚úÖ {description} —Å–æ–∑–¥–∞–Ω (ID: {entity_id})")
                results.append((f"–°–æ–∑–¥–∞–Ω–∏–µ {description}", "‚úÖ"))
            else:
                print(f"   ‚ùå {description}: {response.status_code} - {response.text}")
                results.append((f"–°–æ–∑–¥–∞–Ω–∏–µ {description}", "‚ùå"))
        except Exception as e:
            print(f"   üö´ {description}: {e}")
            results.append((f"–°–æ–∑–¥–∞–Ω–∏–µ {description}", "üö´"))
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    print("\n3. üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–ü–ï–†–ê–¶–ò–Ø–ú–ò...")
    if "–û–ø–µ—Ä–∞—Ü–∏—è" in created_ids:
        operation_id = created_ids["–û–ø–µ—Ä–∞—Ü–∏—è"]
        management_tests = [
            ("/api/v1/operations/start", "–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
            ("/api/v1/operations/pause", "–ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
            ("/api/v1/operations/complete", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        ]
        
        for endpoint, desc in management_tests:
            try:
                response = requests.post(f"{BASE_URL}{endpoint}?operation_id={operation_id}", timeout=10)
                if response.status_code == 200:
                    print(f"   ‚úÖ {desc}")
                    results.append((desc, "‚úÖ"))
                else:
                    print(f"   ‚ùå {desc}: {response.status_code}")
                    results.append((desc, "‚ùå"))
            except Exception as e:
                print(f"   üö´ {desc}: {e}")
                results.append((desc, "üö´"))
    else:
        print("   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)")
        for desc in ["–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"]:
            results.append((desc, "‚ö†Ô∏è"))
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–°–ï GET —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    print("\n4. üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• GET –≠–ù–î–ü–û–ò–ù–¢–û–í...")
    get_endpoints = [
        "/api/v1/employees",
        "/api/v1/orders", 
        "/api/v1/mo",
        "/api/v1/operations",
        "/api/v1/defects", 
        "/api/v1/projects"
    ]
    
    for endpoint in get_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            if response.status_code == 200:
                data = response.json()
                count = len(data) if isinstance(data, list) else "N/A"
                print(f"   ‚úÖ GET {endpoint} ({count} –∑–∞–ø–∏—Å–µ–π)")
                results.append((f"GET {endpoint}", "‚úÖ"))
            else:
                print(f"   ‚ùå GET {endpoint}: {response.status_code}")
                results.append((f"GET {endpoint}", "‚ùå"))
        except Exception as e:
            print(f"   üö´ GET {endpoint}: {e}")
            results.append((f"GET {endpoint}", "üö´"))
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º QR –∫–æ–¥—ã
    print("\n5. üì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QR –ö–û–î–û–í...")
    qr_endpoints = [
        ("/api/v1/qr/order/1", "QR –∑–∞–∫–∞–∑–∞"),
        ("/api/v1/qr/employee/1", "QR —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
        ("/api/v1/qr/mo/1", "QR –ú–û")
    ]
    
    for endpoint, description in qr_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            if response.status_code == 200 and response.headers.get('content-type', '').startswith('image/'):
                print(f"   ‚úÖ {description} (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                results.append((description, "‚úÖ"))
            else:
                print(f"   ‚ùå {description}: {response.status_code}")
                results.append((description, "‚ùå"))
        except Exception as e:
            print(f"   üö´ {description}: {e}")
            results.append((description, "üö´"))
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    success = sum(1 for _, status in results if status == "‚úÖ")
    total = len(results)
    
    for test, status in results:
        print(f"   {status} {test}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success}/{total} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    if success == total:
        print("üéâ 100% –£–°–ü–ï–•! –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –î–ï–ù–¨ 3!")
        print("üöÄ –ì–û–¢–û–í–û –ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ô –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–ò!")
    elif success >= total * 0.9:
        print("‚úÖ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üîß –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É")
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò")
    
    return success, total

if __name__ == "__main__":
    test_100_percent()
