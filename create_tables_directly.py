import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def create_tables():
    print("üóÑÔ∏è –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            user="postgres", 
            password="MesProject2025",
            database="mes_db"
        )
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        tables_sql = [
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            '''
            CREATE TABLE IF NOT EXISTS employees (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(100) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                role VARCHAR(100) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''',
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
            '''
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                name VARCHAR(200) NOT NULL,
                description TEXT,
                status VARCHAR(50) DEFAULT '–Ω–æ–≤—ã–π',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''',
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            '''
            CREATE TABLE IF NOT EXISTS manufacturing_orders (
                id SERIAL PRIMARY KEY,
                order_id INTEGER REFERENCES orders(id),
                name VARCHAR(200) NOT NULL,
                status VARCHAR(50) DEFAULT '–∞–∫—Ç–∏–≤–Ω–æ',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''',
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
            '''
            CREATE TABLE IF NOT EXISTS operations (
                id SERIAL PRIMARY KEY,
                manufacturing_order_id INTEGER REFERENCES manufacturing_orders(id),
                employee_id INTEGER REFERENCES employees(id),
                operation_type VARCHAR(100) NOT NULL,
                status VARCHAR(50) DEFAULT '–Ω–∞—á–∞—Ç–∞',
                start_time TIMESTAMP,
                end_time TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''',
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö
            '''
            CREATE TABLE IF NOT EXISTS defect_reports (
                id SERIAL PRIMARY KEY,
                manufacturing_order_id INTEGER REFERENCES manufacturing_orders(id),
                operation_id INTEGER REFERENCES operations(id),
                defect_type VARCHAR(100) NOT NULL,
                description TEXT,
                severity VARCHAR(50),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''',
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
            '''
            CREATE TABLE IF NOT EXISTS projects (
                id SERIAL PRIMARY KEY,
                name VARCHAR(200) NOT NULL,
                description TEXT,
                status VARCHAR(50) DEFAULT '–∞–∫—Ç–∏–≤–µ–Ω',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            '''
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for i, sql in enumerate(tables_sql, 1):
            try:
                cursor.execute(sql)
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {i}: {e}")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('''
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name
        ''')
        
        tables = cursor.fetchall()
        print(f"\nüìä –°–û–ó–î–ê–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ({len(tables)}):")
        for table in tables:
            print(f"   - {table[0]}")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

if __name__ == "__main__":
    create_tables()
