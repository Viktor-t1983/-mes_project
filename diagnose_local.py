#!/usr/bin/env python3
"""
DIAGNOSTIC SCRIPT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è MES-–ø—Ä–æ–µ–∫—Ç–∞ (–î–Ω–∏ 1‚Äì5)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ñ–∞–π–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
–†–∞–±–æ—Ç–∞–µ—Ç –≤ Git Bash (Windows 10, –±–µ–∑ Docker).
"""

import os
import sys
import subprocess
from pathlib import Path

PROJECT_ROOT = Path(".").resolve()
EXPECTED_FILES = {
    # –î–µ–Ω—å 1‚Äì2: –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    "requirements.txt": True,
    "main.py": True,
    ".env": False,  # –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    ".gitignore": False,

    # –î–µ–Ω—å 3: –Ø–¥—Ä–æ
    "src/models/order.py": True,
    "src/models/operation.py": True,
    "src/models/defect_report.py": True,
    "src/models/employee.py": True,
    "src/models/manufacturing_order.py": True,

    # –î–µ–Ω—å 4: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è, 1–°, –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    "src/models/gamification.py": True,
    "src/services/gamification_service.py": True,
    "src/services/one_c_service.py": True,
    "src/services/replanning_service.py": True,
    "src/api/day4_endpoints.py": True,

    # –î–µ–Ω—å 5: –ú–æ–±–∏–ª—å–Ω–æ–µ API ‚Äî –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
    "src/api/mobile_api.py": True,  # ‚Üê —á–∞—Å—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!
}

def check_file(path: str, required: bool) -> bool:
    full_path = PROJECT_ROOT / path
    exists = full_path.exists()
    status = "‚úÖ" if exists else ("‚ö†Ô∏è" if not required else "‚ùå")
    print(f"{status} {path}")
    return exists or not required

def run_cmd(cmd):
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd=PROJECT_ROOT)
        return result.returncode == 0, result.stdout.strip()
    except Exception as e:
        return False, str(e)

def main():
    print("=" * 70)
    print("üîç DIAGNOSTIC: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è MES-–ø—Ä–æ–µ–∫—Ç–∞")
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {PROJECT_ROOT}")
    print("=" * 70)

    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    missing_required = []
    for file, required in EXPECTED_FILES.items():
        if not check_file(file, required):
            if required:
                missing_required.append(file)

    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    deps_ok, _ = run_cmd("pip list | grep -E 'fastapi|uvicorn|sqlalchemy|alembic'")
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" if deps_ok else "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Alembic –∏ –º–∏–≥—Ä–∞—Ü–∏–π:")
    alembic_ok, _ = run_cmd("alembic --help")
    migrations_exist = (PROJECT_ROOT / "migrations").exists()
    print(f"‚úÖ Alembic –¥–æ—Å—Ç—É–ø–µ–Ω" if alembic_ok else "‚ö†Ô∏è Alembic –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"‚úÖ –ü–∞–ø–∫–∞ migrations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if migrations_exist else "‚ö†Ô∏è –ü–∞–ø–∫–∞ migrations –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub (—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è):")
    git_ok, remote_url = run_cmd("git config --get remote.origin.url")
    if git_ok and "Viktor-t1983/-mes_project" in remote_url:
        print("‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
        clean, _ = run_cmd("git status --porcelain")
        if not clean:
            print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (git status –Ω–µ —á–∏—Å—Ç)")
        else:
            print("‚úÖ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
    else:
        print("‚ö†Ô∏è –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")

    print("\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ main.py (–∏–º–ø–æ—Ä—Ç—ã):")
    try:
        exec(open(PROJECT_ROOT / "main.py").read())
        print("‚úÖ main.py —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ main.py: {e}")

    print("\n" + "=" * 70)
    if missing_required:
        print("‚ùó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –§–ê–ô–õ–´:")
        for f in missing_required:
            print(f"  - {f}")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –î–Ω—è 5.")
    else:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ.")
        print("üéâ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –î–Ω–µ–π 1‚Äì5.")
    print("=" * 70)

if __name__ == "__main__":
    main()
