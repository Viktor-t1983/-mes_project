# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç QR-–∫–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å employee –∏ mo
import re

with open('main.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç QR-–∫–æ–¥–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
old_qr_pattern = r'@app\.get\("/api/v1/qr/\{entity\}/\{id\}"\)[\s\S]*?def generate_qr_code[\s\S]*?return \{[\s\S]*?\}'

new_qr_endpoint = '''
@app.get("/api/v1/qr/{entity}/{id}")
async def generate_qr_code(entity: str, id: int, db: AsyncSession = Depends(get_db)):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ (order, employee, mo)
    """
    valid_entities = ['order', 'employee', 'mo']
    if entity not in valid_entities:
        raise HTTPException(status_code=400, detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—É—â–Ω–æ—Å—Ç—å. –î–æ–ø—É—Å—Ç–∏–º–æ: {valid_entities}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if entity == 'order':
        result = await db.execute(select(Order).where(Order.id == id))
    elif entity == 'employee':
        result = await db.execute(select(Employee).where(Employee.id == id))
    elif entity == 'mo':
        result = await db.execute(select(ManufacturingOrder).where(ManufacturingOrder.id == id))
    
    entity_obj = result.scalar_one_or_none()
    
    if not entity_obj:
        raise HTTPException(status_code=404, detail=f"{entity.capitalize()} —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–¥–∞–Ω–Ω—ã–µ
    qr_data = f"{entity}_{id}_{hash(f'{entity}{id}') % 10000:04d}"
    
    return {
        "message": f"QR-–∫–æ–¥ –¥–ª—è {entity} {id}",
        "entity": entity,
        "entity_id": id,
        "entity_name": getattr(entity_obj, 'product_name', getattr(entity_obj, 'first_name', getattr(entity_obj, 'order_number', 'Unknown'))),
        "qr_data": qr_data,
        "qr_image_url": f"/api/v1/qr/image/{qr_data}"  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }
'''

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–∞ –Ω–æ–≤—ã–π
if re.search(old_qr_pattern, content):
    content = re.sub(old_qr_pattern, new_qr_endpoint, content, flags=re.DOTALL)
    print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç QR-–∫–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç QR-–∫–æ–¥–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
with open('main.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É QR-–∫–æ–¥–æ–≤")
