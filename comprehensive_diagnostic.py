import requests
import time
import sys
import os

BASE_URL = "http://localhost:8000"

def check_directory_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    required_dirs = [
        "src/models",
        "src/schemas", 
        "src/utils",
        "migrations"
    ]
    
    required_files = [
        "main.py",
        "src/models/__init__.py",
        "src/models/employee.py",
        "src/models/manufacturing_order.py", 
        "src/models/operation.py",
        "src/models/defect_report.py",
        "src/schemas/__init__.py",
        "src/schemas/employee.py",
        "src/schemas/manufacturing_order.py",
        "src/schemas/operation.py", 
        "src/schemas/defect_report.py",
        "src/utils/qrcode_generator.py",
        ".env"
    ]
    
    for dir_path in required_dirs:
        if os.path.exists(dir_path):
            print(f"‚úÖ –ü–∞–ø–∫–∞: {dir_path}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞: {dir_path}")
    
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ –§–∞–π–ª: {file_path}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file_path}")

def check_server_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
            print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {BASE_URL}/docs")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def check_endpoints_functionality():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 50)
    
    endpoints = [
        ("GET", "/api/v1/health", "Health Check", None),
        ("GET", "/api/v1/qr/order/1", "QR –∫–æ–¥ –∑–∞–∫–∞–∑–∞", None),
        ("GET", "/api/v1/qr/employee/1", "QR –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", None),
        ("GET", "/api/v1/qr/mo/1", "QR –∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", None),
        ("GET", "/api/v1/orders", "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", None),
        ("GET", "/api/v1/mo", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", None),
        ("GET", "/api/v1/employees", "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", None),
        ("GET", "/api/v1/operations", "–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π", None),
        ("GET", "/api/v1/defects", "–°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π", None),
        ("GET", "/api/v1/projects", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", None),
    ]
    
    working_endpoints = []
    broken_endpoints = []
    
    for method, endpoint, description, data in endpoints:
        try:
            start_time = time.time()
            if method == "GET":
                response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
            else:
                response = requests.post(f"{BASE_URL}{endpoint}", json=data, timeout=10)
            
            response_time = (time.time() - start_time) * 1000
            
            if response.status_code == 200:
                print(f"‚úÖ {description} - 200 OK ({response_time:.0f}ms)")
                working_endpoints.append(endpoint)
            elif response.status_code == 500:
                print(f"‚ö†Ô∏è  {description} - 500 (–û—à–∏–±–∫–∞ –ë–î)")
                broken_endpoints.append(endpoint)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                try:
                    error_detail = response.json()
                    if 'detail' in error_detail:
                        print(f"   üí° –û—à–∏–±–∫–∞: {error_detail['detail']}")
                except:
                    pass
            else:
                print(f"‚ùå {description} - {response.status_code}")
                broken_endpoints.append(endpoint)
                
        except requests.exceptions.RequestException as e:
            print(f"üö´ {description} - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            broken_endpoints.append(endpoint)
        except Exception as e:
            print(f"üí• {description} - –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            broken_endpoints.append(endpoint)
    
    return working_endpoints, broken_endpoints

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    print("\nüóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –∏–∑ .env
    try:
        with open('.env', 'r') as f:
            env_content = f.read()
            if 'DATABASE_URL' in env_content:
                print("‚úÖ –§–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ë–î
                if 'postgresql' in env_content:
                    print("üî∑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
                elif 'sqlite' in env_content:
                    print("üî∂ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
                else:
                    print("‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ë–î")
                return True
            else:
                print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
        return False

def check_models_import():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –≤ main.py"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–ê –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_models = [
            'Employee',
            'ManufacturingOrder', 
            'Operation',
            'DefectReport',
            'Order'
        ]
        
        for model in required_models:
            if model in content:
                print(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print(f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ main.py")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ main.py: {e}")

def main():
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ MES")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    check_directory_structure()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if not check_server_availability():
        print("\nüö® –°–ï–†–í–ï–† –ù–ï –î–û–°–¢–£–ü–ï–ù! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –¢–µ—Ä–º–∏–Ω–∞–ª–µ 1:")
        print("uvicorn main:app --host 0.0.0.0 --port 8000 --reload")
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    check_database_connection()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
    check_models_import()
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    working, broken = check_endpoints_functionality()
    
    # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(working)}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {len(broken)}")
    
    if broken:
        print("\nüîß –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:")
        for endpoint in broken:
            print(f"   - {endpoint}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –î–µ–Ω—å 3
    print("\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï '–î–ï–ù–¨ 3: –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ï –Ø–î–†–û'")
    print("=" * 50)
    
    day3_requirements = {
        "–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö": [
            "Employee", "ManufacturingOrder", "Operation", "DefectReport"
        ],
        "–°—Ö–µ–º—ã Pydantic": [
            "employee.py", "manufacturing_order.py", "operation.py", "defect_report.py"  
        ],
        "–£—Ç–∏–ª–∏—Ç—ã": [
            "qrcode_generator.py"
        ],
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã": [
            "/api/v1/mo (POST)",
            "/api/v1/operations/start (POST)", 
            "/api/v1/operations/pause (POST)",
            "/api/v1/operations/complete (POST)",
            "/api/v1/defects (POST)",
            "/api/v1/qr/{entity}/{id} (GET)"
        ]
    }
    
    all_requirements_met = True
    
    for category, requirements in day3_requirements.items():
        print(f"\n{category}:")
        for req in requirements:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            if any(req.lower() in endpoint.lower() for endpoint in working):
                print(f"  ‚úÖ {req}")
            else:
                print(f"  ‚ùå {req}")
                all_requirements_met = False
    
    if all_requirements_met:
        print("\nüéâ –í–´–í–û–î: –°–∏—Å—Ç–µ–º–∞ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –î–µ–Ω—å 3!")
    else:
        print("\n‚ö†Ô∏è  –í–´–í–û–î: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–µ–Ω—å 3")

if __name__ == "__main__":
    main()
