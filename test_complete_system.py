import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_complete_system():
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    test_results = []
    
    # 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    print("1. üìù –°–û–ó–î–ê–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–ê...")
    employee_data = {
        "first_name": "–ò–≤–∞–Ω",
        "last_name": "–ò–≤–∞–Ω–æ–≤",
        "role": "–û–ø–µ—Ä–∞—Ç–æ—Ä"
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/employees", json=employee_data)
        if response.status_code == 200:
            employee_id = response.json()["id"]
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (ID: {employee_id})")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", "üö´"))
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    print("\n2. üì¶ –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê...")
    order_data = {
        "product_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        "quantity": 10
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/orders", json=order_data)
        if response.status_code == 200:
            order_id = response.json()["id"]
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (ID: {order_id})")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "üö´"))
    
    # 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    print("\n3. üè≠ –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ì–û –ó–ê–î–ê–ù–ò–Ø...")
    mo_data = {
        "product_name": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –ø—Ä–æ–¥—É–∫—Ç", 
        "quantity": 5
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/mo", json=mo_data)
        if response.status_code == 200:
            mo_id = response.json()["id"]
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ (ID: {mo_id})")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ú–û", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ú–û", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ú–û", "üö´"))
    
    # 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\n4. ‚öôÔ∏è –°–û–ó–î–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò...")
    operation_data = {
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/operations", json=operation_data)
        if response.status_code == 200:
            operation_id = response.json()["id"]
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ (ID: {operation_id})")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", "‚ùå"))
            operation_id = 1
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", "üö´"))
        operation_id = 1
    
    # 5. –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    print("\n5. üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–Ø–ú–ò...")
    management_endpoints = [
        ("/api/v1/operations/start", "–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
        ("/api/v1/operations/pause", "–ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"),
        ("/api/v1/operations/complete", "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    ]
    
    for endpoint, description in management_endpoints:
        try:
            response = requests.post(f"{BASE_URL}{endpoint}?operation_id={operation_id}")
            if response.status_code == 200:
                print(f"   ‚úÖ {description} - –£—Å–ø–µ—à–Ω–æ")
                test_results.append((description, "‚úÖ"))
            else:
                print(f"   ‚ùå {description} - –û—à–∏–±–∫–∞: {response.status_code}")
                test_results.append((description, "‚ùå"))
        except Exception as e:
            print(f"   üö´ {description} - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            test_results.append((description, "üö´"))
    
    # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    print("\n6. ‚ö†Ô∏è –°–û–ó–î–ê–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–ò–Ø...")
    defect_data = {
        "defect_type": "–ö–∞—á–µ—Å—Ç–≤–æ",
        "defect_description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "severity": "medium"
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/defects", json=defect_data)
        if response.status_code == 200:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", "üö´"))
    
    # 7. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    print("\n7. üìã –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê...")
    project_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
    }
    try:
        response = requests.post(f"{BASE_URL}/api/v1/projects", json=project_data)
        if response.status_code == 200:
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "‚úÖ"))
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "‚ùå"))
    except Exception as e:
        print(f"   üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        test_results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "üö´"))
    
    # 8. –¢–µ—Å—Ç QR –∫–æ–¥–æ–≤
    print("\n8. üì± –¢–ï–°–¢ QR –ö–û–î–û–í...")
    qr_endpoints = [
        ("/api/v1/qr/order/1", "QR –∑–∞–∫–∞–∑–∞"),
        ("/api/v1/qr/employee/1", "QR —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"),
        ("/api/v1/qr/mo/1", "QR –ú–û")
    ]
    
    for endpoint, description in qr_endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint}")
            if response.status_code == 200:
                print(f"   ‚úÖ {description} - –†–∞–±–æ—Ç–∞–µ—Ç")
                test_results.append((description, "‚úÖ"))
            else:
                print(f"   ‚ùå {description} - –û—à–∏–±–∫–∞: {response.status_code}")
                test_results.append((description, "‚ùå"))
        except Exception as e:
            print(f"   üö´ {description} - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            test_results.append((description, "üö´"))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 40)
    
    success_count = sum(1 for _, status in test_results if status == "‚úÖ")
    total_count = len(test_results)
    
    for test_name, status in test_results:
        print(f"   {status} {test_name}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –î–µ–Ω—å 3!")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    test_complete_system()
