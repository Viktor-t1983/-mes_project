import requests
from main import app

def final_verification():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê 100% –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø")
    print("=" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    endpoints = {}
    for route in app.routes:
        methods = getattr(route, 'methods', None)
        path = getattr(route, 'path', None)
        if methods and path:
            endpoints[path] = methods
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –î–µ–Ω—å 3
    day3_requirements = {
        "GET": [
            "/api/v1/health",
            "/api/v1/orders",
            "/api/v1/employees", 
            "/api/v1/mo",
            "/api/v1/operations",
            "/api/v1/defects",
            "/api/v1/projects",
            "/api/v1/qr/order/{order_id}",
            "/api/v1/qr/employee/{employee_id}",
            "/api/v1/qr/mo/{mo_id}"
        ],
        "POST": [
            "/api/v1/employees",
            "/api/v1/orders",
            "/api/v1/mo",
            "/api/v1/operations", 
            "/api/v1/operations/start",
            "/api/v1/operations/pause",
            "/api/v1/operations/complete",
            "/api/v1/defects",
            "/api/v1/projects"
        ]
    }
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –î–ï–ù–¨ 3:")
    print("-" * 40)
    
    all_requirements_met = True
    
    for method, required_endpoints in day3_requirements.items():
        print(f"\n{method} –º–µ—Ç–æ–¥—ã:")
        for endpoint in required_endpoints:
            if endpoint in endpoints and method in endpoints[endpoint]:
                print(f"   ‚úÖ {endpoint}")
            else:
                print(f"   ‚ùå {endpoint}")
                all_requirements_met = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò:")
    print("-" * 40)
    
    BASE_URL = "http://localhost:8000"
    test_results = []
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        employee_data = {"first_name": "–¢–µ—Å—Ç", "last_name": "–¢–µ—Å—Ç–æ–≤", "role": "–û–ø–µ—Ä–∞—Ç–æ—Ä"}
        response = requests.post(f"{BASE_URL}/api/v1/employees", json=employee_data, timeout=10)
        if response.status_code == 200:
            print("‚úÖ POST /api/v1/employees - –†–ê–ë–û–¢–ê–ï–¢")
            test_results.append(True)
        else:
            print(f"‚ùå POST /api/v1/employees - –û—à–∏–±–∫–∞: {response.status_code}")
            test_results.append(False)
    except Exception as e:
        print(f"üö´ POST /api/v1/employees - –û—à–∏–±–∫–∞: {e}")
        test_results.append(False)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    try:
        response = requests.get(f"{BASE_URL}/api/v1/employees", timeout=10)
        if response.status_code == 200:
            print("‚úÖ GET /api/v1/employees - –†–ê–ë–û–¢–ê–ï–¢")
            test_results.append(True)
        else:
            print(f"‚ùå GET /api/v1/employees - –û—à–∏–±–∫–∞: {response.status_code}")
            test_results.append(False)
    except Exception as e:
        print(f"üö´ GET /api/v1/employees - –û—à–∏–±–∫–∞: {e}")
        test_results.append(False)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 40)
    
    if all_requirements_met and all(test_results):
        print("üéâ 100% –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –î–ï–ù–¨ 3 –î–û–°–¢–ò–ì–ù–£–¢–û!")
        print("‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    elif all_requirements_met:
        print("‚úÖ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ùå –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return all_requirements_met and all(test_results)

if __name__ == "__main__":
    final_verification()
