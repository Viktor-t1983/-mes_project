import requests
import json
import time

def comprehensive_system_test():
    base_url = "http://localhost:8000/api/v1"
    
    print("üéØ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ MES")
    print("=" * 50)
    print("üìã –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´...")
    print()

    # 1. –ë–ê–ó–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê
    print("üîß 1. –ë–ê–ó–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê")
    print("-" * 30)
    
    try:
        # Health check
        health_response = requests.get(f"{base_url}/health")
        print(f"‚úÖ Health Check: {health_response.status_code}")
        if health_response.status_code == 200:
            health_data = health_response.json()
            print(f"   üìä Status: {health_data.get('status', 'N/A')}")
            print(f"   üóÑÔ∏è Database: {health_data.get('database', 'N/A')}")
        else:
            print(f"   ‚ùå Response: {health_response.text}")
    except Exception as e:
        print(f"‚ùå Health Check Failed: {e}")
        return

    # 2. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –û–°–ù–û–í–ù–´–• –≠–ù–î–ü–û–ò–ù–¢–û–í
    print("\nüìä 2. –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–´–• –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("-" * 30)

    endpoints = [
        ("–ó–∞–∫–∞–∑—ã", "/orders"),
        ("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", "/employees"), 
        ("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "/mo"),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏", "/operations"),
        ("–î–µ—Ñ–µ–∫—Ç—ã", "/defects"),
        ("–ü—Ä–æ–µ–∫—Ç—ã", "/projects")
    ]

    endpoint_results = {}
    
    for name, endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}")
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"{status} {name}: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                count = len(data) if isinstance(data, list) else "N/A"
                print(f"   üìà –ó–∞–ø–∏—Å–µ–π: {count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if data and isinstance(data, list) and len(data) > 0:
                    sample = data[0]
                    print(f"   üîç –ü—Ä–∏–º–µ—Ä –ø–æ–ª–µ–π: {list(sample.keys())[:3]}...")
            else:
                print(f"   üí¨ Response: {response.text[:100]}...")
                
            endpoint_results[endpoint] = response.status_code
            
        except Exception as e:
            print(f"‚ùå {name} Error: {e}")
            endpoint_results[endpoint] = "ERROR"

    # 3. –ü–†–û–í–ï–†–ö–ê QR-–ì–ï–ù–ï–†–ê–¶–ò–ò
    print("\nüî≤ 3. –ü–†–û–í–ï–†–ö–ê QR-–ö–û–î–û–í")
    print("-" * 30)
    
    qr_endpoints = [
        ("QR –ó–∞–∫–∞–∑", "/qr/order/1"),
        ("QR –°–æ—Ç—Ä—É–¥–Ω–∏–∫", "/qr/employee/1"), 
        ("QR –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", "/qr/mo/1")
    ]
    
    for name, endpoint in qr_endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}")
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            content_type = response.headers.get('content-type', '')
            print(f"{status} {name}: {response.status_code} [{content_type}]")
            
            if response.status_code == 200:
                print(f"   üìè –†–∞–∑–º–µ—Ä: {len(response.content)} bytes")
        except Exception as e:
            print(f"‚ùå {name} Error: {e}")

    # 4. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
    print("\nüèóÔ∏è 4. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º employees (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ)
    try:
        emp_response = requests.get(f"{base_url}/employees")
        if emp_response.status_code == 200:
            employees = emp_response.json()
            if employees and len(employees) > 0:
                emp = employees[0]
                required_fields = ['qr_code', 'first_name', 'last_name', 'role']
                missing_fields = [field for field in required_fields if field not in emp]
                if not missing_fields:
                    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: OK")
                    print(f"   üë§ –ü—Ä–∏–º–µ—Ä: {emp['first_name']} {emp['last_name']} ({emp['role']})")
                else:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

    # 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
    print("\nüìà 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("-" * 30)
    
    stats = {}
    for name, endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}")
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    stats[name] = len(data)
        except:
            stats[name] = 0
    
    for name, count in stats.items():
        print(f"   üì¶ {name}: {count} –∑–∞–ø–∏—Å–µ–π")

    # 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
    print("\nüéØ 6. –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("-" * 30)
    
    total_tests = len(endpoints) + len(qr_endpoints) + 2  # + health + structure
    successful_tests = sum(1 for result in endpoint_results.values() if result == 200)
    successful_tests += 1 if health_response.status_code == 200 else 0  # health
    successful_tests += 1  # structure check
    
    success_rate = (successful_tests / total_tests) * 100
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_tests - successful_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate == 100:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        print("‚úÖ API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        print("\nüöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    else:
        print(f"\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ: {100 - success_rate:.1f}% —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")

    # 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    print("\nüí° 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø")
    print("-" * 30)
    
    if stats.get('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', 0) < 3:
        print("üî∏ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 3)")
    
    if stats.get('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', 0) < 2:
        print("üî∏ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    if stats.get('–û–ø–µ—Ä–∞—Ü–∏–∏', 0) < 5:
        print("üî∏ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow")
    
    print("üî∏ –†–µ–∞–ª–∏–∑—É–π—Ç–µ POST/PUT endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("üî∏ –î–æ–±–∞–≤—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    print("üî∏ –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π workflow –æ–ø–µ—Ä–∞—Ü–∏–π")

if __name__ == "__main__":
    comprehensive_system_test()
