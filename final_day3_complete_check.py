import requests
import time

BASE_URL = "http://localhost:8000"

def complete_day3_check():
    print("üéØ –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø '–î–ï–ù–¨ 3'")
    print("=" * 60)
    
    # –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ "–î–µ–Ω—å 3"
    day3_requirements = {
        "‚úÖ –ú–û–î–ï–õ–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•": [
            "Employee", "ManufacturingOrder", "Operation", "DefectReport"
        ],
        "üåê API –≠–ù–î–ü–û–ò–ù–¢–´": [
            "POST /api/v1/orders - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
            "POST /api/v1/mo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", 
            "POST /api/v1/operations/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é",
            "POST /api/v1/operations/pause - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É",
            "POST /api/v1/operations/complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é",
            "POST /api/v1/defects - –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏",
            "GET /api/v1/qr/order/{id} - QR-–∫–æ–¥ –∑–∞–∫–∞–∑–∞",
            "GET /api/v1/qr/employee/{id} - QR-–∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 
            "GET /api/v1/qr/mo/{id} - QR-–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
        ],
        "üîß –£–¢–ò–õ–ò–¢–´": [
            "QR-–∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"
        ],
        "üóÉÔ∏è –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê": [
            "–ú–∏–≥—Ä–∞—Ü–∏–∏ Alembic",
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ src/models/, src/schemas/, src/utils/"
        ]
    }
    
    print("üìã –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
    
    all_working = True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    print("\\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–û–í:")
    
    # 1. –¢–µ—Å—Ç QR-–∫–æ–¥–æ–≤
    print("   üì± QR-–ö–û–î–´:")
    qr_entities = ['order', 'employee', 'mo']
    for entity in qr_entities:
        try:
            response = requests.get(f"{BASE_URL}/api/v1/qr/{entity}/1", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"      ‚úÖ {entity}: {data['qr_data']}")
            else:
                print(f"      ‚ùå {entity}: {response.status_code}")
                all_working = False
        except Exception as e:
            print(f"      üí• {entity}: {e}")
            all_working = False
    
    # 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("   üìù –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–•:")
    test_data = [
        ("/api/v1/employees", {"first_name": "–§–∏–Ω–∞–ª—å–Ω—ã–π", "last_name": "–¢–µ—Å—Ç", "role": "–¢–µ—Å—Ç–µ—Ä"}),
        ("/api/v1/mo", {"order_number": "FINAL-TEST-001", "product_name": "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç", "product_code": "FINAL", "quantity": 1}),
        ("/api/v1/operations", {"manufacturing_order_id": 1, "operation_number": "OP-FINAL", "name": "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"})
    ]
    
    for endpoint, params in test_data:
        try:
            response = requests.post(f"{BASE_URL}{endpoint}", params=params, timeout=5)
            if response.status_code == 200:
                print(f"      ‚úÖ {endpoint}: —Å–æ–∑–¥–∞–Ω–æ")
            else:
                print(f"      ‚ùå {endpoint}: {response.status_code}")
        except Exception as e:
            print(f"      üí• {endpoint}: {e}")
    
    # 3. –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    print("   ‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–Ø–ú–ò:")
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
        op_response = requests.post(f"{BASE_URL}/api/v1/operations", params={
            "manufacturing_order_id": 1,
            "operation_number": "TEST-CONTROL",
            "name": "–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        })
        
        if op_response.status_code == 200:
            op_id = op_response.json()['id']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
            start_response = requests.post(f"{BASE_URL}/api/v1/operations/start", params={
                "operation_id": op_id,
                "employee_id": 1
            })
            print(f"      ‚úÖ –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏: {start_response.status_code}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É
            pause_response = requests.post(f"{BASE_URL}/api/v1/operations/pause", params={
                "operation_id": op_id
            })
            print(f"      ‚úÖ –ü–∞—É–∑–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {pause_response.status_code}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            complete_response = requests.post(f"{BASE_URL}/api/v1/operations/complete", params={
                "operation_id": op_id
            })
            print(f"      ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {complete_response.status_code}")
            
        else:
            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞")
            
    except Exception as e:
        print(f"      üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
    
    # 4. –¢–µ—Å—Ç –¥–µ—Ñ–µ–∫—Ç–æ–≤
    print("   ‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –î–ï–§–ï–ö–¢–û–í:")
    try:
        defect_response = requests.post(f"{BASE_URL}/api/v1/defects", params={
            "manufacturing_order_id": 1,
            "operation_id": 1, 
            "reported_by": 1,
            "description": "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–µ—Ñ–µ–∫—Ç–∞",
            "defect_type": "–∫–∞—á–µ—Å—Ç–≤–æ"
        })
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞: {defect_response.status_code}")
    except Exception as e:
        print(f"      üí• –û—à–∏–±–∫–∞ –¥–µ—Ñ–µ–∫—Ç–∞: {e}")
    
    print("\\n" + "=" * 60)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ '–î–ï–ù–¨ 3':")
    print("‚úÖ –í–´–ü–û–õ–ù–ï–ù–û:")
    print("   - –í—Å–µ –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("   - –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã") 
    print("   - –°–∏—Å—Ç–µ–º–∞ QR-–∫–æ–¥–æ–≤")
    print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (—Å—Ç–∞—Ä—Ç/–ø–∞—É–∑–∞/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)")
    print("   - –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    
    if all_working:
        print("\\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø '–î–ï–ù–¨ 3' –í–´–ü–û–õ–ù–ï–ù–´!")
        print("üöÄ MES-X PRODUCTION CORE –ì–û–¢–û–í –ö –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–ò!")
    else:
        print("\\n‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print(f"\\nüåê –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {BASE_URL}/docs")
    print("üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–ø–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    complete_day3_check()
