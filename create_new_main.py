# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π main.py
new_content = '''from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from datetime import datetime
import os

from src.models.order import Order
from src.models.employee import Employee
from src.models.manufacturing_order import ManufacturingOrder
from src.models.operation import Operation
from src.models.defect_report import DefectReport
from src.models.project import Project

# Database setup
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql+asyncpg://postgres:password@localhost/mes_system")
engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

app = FastAPI(title="MES-X Production System", version="4.0")

# Dependency
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

# ========== ORDERS ==========
@app.post("/api/v1/orders")
async def create_order(product_name: str, quantity: int, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    order = Order(product_name=product_name, quantity=quantity, status="created")
    db.add(order)
    await db.commit()
    await db.refresh(order)
    return {"message": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω", "id": order.id}

@app.get("/api/v1/orders")
async def get_orders(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    result = await db.execute(select(Order))
    orders = result.scalars().all()
    return orders

# ========== MANUFACTURING ORDERS ==========
@app.post("/api/v1/mo")
async def create_manufacturing_order(
    order_number: str,
    product_name: str,
    product_code: str,
    quantity: int,
    priority: str = "normal",
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    mo = ManufacturingOrder(
        order_number=order_number,
        product_name=product_name,
        product_code=product_code,
        quantity=quantity,
        priority=priority,
        status="created"
    )
    db.add(mo)
    await db.commit()
    await db.refresh(mo)
    return {"message": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", "id": mo.id}

@app.get("/api/v1/mo")
async def get_manufacturing_orders(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
    result = await db.execute(select(ManufacturingOrder))
    mo_list = result.scalars().all()
    return mo_list

# ========== EMPLOYEES ==========
@app.post("/api/v1/employees")
async def create_employee(
    first_name: str,
    last_name: str,
    role: str,
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    employee = Employee(
        first_name=first_name,
        last_name=last_name,
        role=role,
        is_active=True
    )
    db.add(employee)
    await db.commit()
    await db.refresh(employee)
    return {"message": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω", "id": employee.id}

@app.get("/api/v1/employees")
async def get_employees(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    result = await db.execute(select(Employee))
    employees = result.scalars().all()
    return employees

# ========== OPERATIONS ==========
@app.post("/api/v1/operations")
async def create_operation(
    manufacturing_order_id: int,
    operation_number: str,
    name: str,
    description: str = None,
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    operation = Operation(
        manufacturing_order_id=manufacturing_order_id,
        operation_number=operation_number,
        name=name,
        description=description,
        status="pending"
    )
    db.add(operation)
    await db.commit()
    await db.refresh(operation)
    return {"message": "–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞", "id": operation.id}

@app.get("/api/v1/operations")
async def get_operations(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    result = await db.execute(select(Operation))
    operations = result.scalars().all()
    return operations

@app.post("/api/v1/operations/start")
async def start_operation(operation_id: int, employee_id: int, db: AsyncSession = Depends(get_db)):
    """–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    result = await db.execute(select(Operation).where(Operation.id == operation_id))
    operation = result.scalar_one_or_none()
    
    if not operation:
        raise HTTPException(status_code=404, detail="–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    operation.status = "in_progress"
    operation.assigned_employee_id = employee_id
    operation.started_at = datetime.utcnow()
    await db.commit()
    
    return {"message": f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –∑–∞–ø—É—â–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {employee_id}", "status": "started"}

@app.post("/api/v1/operations/pause")
async def pause_operation(operation_id: int, db: AsyncSession = Depends(get_db)):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    result = await db.execute(select(Operation).where(Operation.id == operation_id))
    operation = result.scalar_one_or_none()
    
    if not operation:
        raise HTTPException(status_code=404, detail="–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    if operation.status != "in_progress":
        raise HTTPException(status_code=400, detail="–ú–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
    operation.status = "paused"
    await db.commit()
    
    return {"message": f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "status": "paused"}

@app.post("/api/v1/operations/complete")
async def complete_operation(operation_id: int, db: AsyncSession = Depends(get_db)):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    result = await db.execute(select(Operation).where(Operation.id == operation_id))
    operation = result.scalar_one_or_none()
    
    if not operation:
        raise HTTPException(status_code=404, detail="–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    operation.status = "completed"
    operation.completed_at = datetime.utcnow()
    await db.commit()
    
    return {"message": f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "status": "completed"}

# ========== DEFECTS ==========
@app.post("/api/v1/defects")
async def create_defect_report(
    manufacturing_order_id: int,
    operation_id: int,
    reported_by: int,
    description: str,
    defect_type: str = "–∫–∞—á–µ—Å—Ç–≤–æ",
    severity: str = "medium",
    quantity_affected: int = 1,
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –¥–µ—Ñ–µ–∫—Ç–µ"""
    defect = DefectReport(
        manufacturing_order_id=manufacturing_order_id,
        operation_id=operation_id,
        reported_by=reported_by,
        defect_description=description,
        defect_type=defect_type,
        severity=severity,
        quantity_affected=quantity_affected,
        status="reported"
    )
    db.add(defect)
    await db.commit()
    await db.refresh(defect)
    return {"message": "–ë—Ä–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "id": defect.id}

@app.get("/api/v1/defects")
async def get_defects(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤"""
    result = await db.execute(select(DefectReport))
    defects = result.scalars().all()
    return defects

# ========== PROJECTS ==========
@app.post("/api/v1/projects")
async def create_project(name: str, description: str = None, db: AsyncSession = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = Project(name=name, description=description)
    db.add(project)
    await db.commit()
    await db.refresh(project)
    return {"message": "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω", "id": project.id}

@app.get("/api/v1/projects")
async def get_projects(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    result = await db.execute(select(Project))
    projects = result.scalars().all()
    return projects

# ========== QR CODE GENERATION ==========
@app.get("/api/v1/qr/{entity}/{id}")
async def generate_qr_code(entity: str, id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏"""
    valid_entities = ["order", "employee", "mo"]
    if entity not in valid_entities:
        raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—É—â–Ω–æ—Å—Ç—å")
    
    qr_data = f"{entity}_{id}_clean_{hash(f'{entity}{id}') % 10000:04d}"
    
    return {
        "message": f"QR-–∫–æ–¥ –¥–ª—è {entity} {id}",
        "entity": entity,
        "entity_id": id,
        "qr_data": qr_data
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''

with open('main.py', 'w', encoding='utf-8') as f:
    f.write(new_content)

print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π main.py")
print("üìã –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
print("   - Orders, MO, Employees, Operations, Defects, Projects")
print("   - QR-–∫–æ–¥—ã –¥–ª—è order, employee, mo")
print("   - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ (start/pause/complete)")
