# –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ defects
with open('main.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç defects
import re

# –ù–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
new_defect_endpoint = '''@app.post("/api/v1/defects")
async def create_defect_report(
    manufacturing_order_id: int,
    operation_id: int,
    reported_by: int,
    description: str,
    defect_type: str = "–∫–∞—á–µ—Å—Ç–≤–æ",
    severity: str = "medium",
    quantity_affected: int = 1,
    db: AsyncSession = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –¥–µ—Ñ–µ–∫—Ç–µ
    """
    defect = DefectReport(
        manufacturing_order_id=manufacturing_order_id,
        operation_id=operation_id,
        reported_by=reported_by,
        defect_description=description,
        defect_type=defect_type,
        severity=severity,
        quantity_affected=quantity_affected,
        status="reported"
    )
    db.add(defect)
    await db.commit()
    await db.refresh(defect)
    return {"message": "–ë—Ä–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "id": defect.id}'''

# –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
old_pattern = r'@app\.post\("/api/v1/defects"\)[^}]*?defect\.id\}'
content = re.sub(old_pattern, new_defect_endpoint, content, flags=re.DOTALL)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
with open('main.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç defects –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
print("üìã –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: manufacturing_order_id, operation_id, reported_by")
