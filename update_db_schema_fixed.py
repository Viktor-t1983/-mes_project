import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

def update_schema():
    # –ü–æ–ª—É—á–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º URL
    db_url = os.getenv("DATABASE_URL")
    if "asyncpg" in db_url:
        db_url = db_url.replace("postgresql+asyncpg://", "postgresql://")
    
    print("üõ† –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 45)
    print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {db_url}")
    
    try:
        conn = psycopg2.connect(db_url)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ orders
        print("\nüìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É orders...")
        try:
            cursor.execute("""
                ALTER TABLE orders 
                ADD COLUMN IF NOT EXISTS project_id INTEGER DEFAULT 1,
                ADD COLUMN IF NOT EXISTS name VARCHAR,
                ADD COLUMN IF NOT EXISTS description TEXT
            """)
            print("‚úÖ orders –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ orders: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ operations
        print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É operations...")
        try:
            cursor.execute("""
                ALTER TABLE operations 
                ADD COLUMN IF NOT EXISTS operation_type VARCHAR DEFAULT 'production',
                ADD COLUMN IF NOT EXISTS workcenter_id INTEGER DEFAULT 1
            """)
            print("‚úÖ operations –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ operations: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ projects
        print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É projects...")
        try:
            cursor.execute("""
                ALTER TABLE projects 
                ADD COLUMN IF NOT EXISTS status VARCHAR DEFAULT 'active'
            """)
            print("‚úÖ projects –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ projects: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º employees.allowed_workcenters
        print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É employees...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞
            cursor.execute("""
                SELECT data_type 
                FROM information_schema.columns 
                WHERE table_name = 'employees' AND column_name = 'allowed_workcenters'
            """)
            result = cursor.fetchone()
            
            if result and result[0] != 'jsonb':
                cursor.execute("""
                    ALTER TABLE employees 
                    ALTER COLUMN allowed_workcenters TYPE JSONB 
                    USING COALESCE(allowed_workcenters::jsonb, '[]'::jsonb)
                """)
            print("‚úÖ employees –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ employees: {e}")
        
        print("\nüéâ –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–ë–ù–û–í–õ–ï–ù–ê!")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    update_schema()
