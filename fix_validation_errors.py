"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic
–ó–∞–ø—É—Å–∫–∞—Ç—å –≤ –¢–µ—Ä–º–∏–Ω–∞–ª–µ 2 –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¢–µ—Ä–º–∏–Ω–∞–ª–µ 1
"""

import os
import sys

def fix_employee_model():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Employee - –ø–æ–ª–µ allowed_workcenters"""
    employee_model_path = "src/models/employee.py"
    
    new_content = '''from sqlalchemy import Column, Integer, String, Boolean, JSON, DateTime
from sqlalchemy.sql import func
from src.database import Base

class Employee(Base):
    __tablename__ = "employees"

    id = Column(Integer, primary_key=True, index=True)
    qr_code = Column(String, unique=True, index=True)
    first_name = Column(String, index=True)
    last_name = Column(String, index=True)
    role = Column(String)
    allowed_workcenters = Column(JSON, default=list)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: default=list –≤–º–µ—Å—Ç–æ None
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    def __repr__(self):
        return f"<Employee {self.first_name} {self.last_name} - {self.role}>"
'''

    with open(employee_model_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –ú–æ–¥–µ–ª—å Employee –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_employee_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É Employee"""
    employee_schema_path = "src/schemas/employee.py"
    
    new_content = '''from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime

class EmployeeBase(BaseModel):
    qr_code: str
    first_name: str
    last_name: str
    role: str
    allowed_workcenters: List[str] = []  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    is_active: bool = True

class EmployeeCreate(EmployeeBase):
    pass

class EmployeeUpdate(BaseModel):
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    role: Optional[str] = None
    allowed_workcenters: Optional[List[str]] = None
    is_active: Optional[bool] = None

class Employee(EmployeeBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
'''

    with open(employee_schema_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –°—Ö–µ–º–∞ Employee –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_operation_model():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Operation - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è"""
    operation_model_path = "src/models/operation.py"
    
    new_content = '''from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, ForeignKey
from sqlalchemy.sql import func
from src.database import Base

class Operation(Base):
    __tablename__ = "operations"

    id = Column(Integer, primary_key=True, index=True)
    manufacturing_order_id = Column(Integer, ForeignKey("manufacturing_orders.id"))
    operation_number = Column(String, index=True)
    name = Column(String)
    description = Column(String)
    operation_type = Column(String, default="production")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
    workcenter_id = Column(Integer, default=1)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
    planned_duration = Column(Float)
    actual_duration = Column(Float)
    status = Column(String, default="pending")
    assigned_employee_id = Column(Integer, ForeignKey("employees.id"))
    started_at = Column(DateTime(timezone=True))
    completed_at = Column(DateTime(timezone=True))
    quality_check_passed = Column(Boolean)
    notes = Column(String)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    def __repr__(self):
        return f"<Operation {self.operation_number} - {self.name}>"
'''

    with open(operation_model_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –ú–æ–¥–µ–ª—å Operation –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_operation_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É Operation"""
    operation_schema_path = "src/schemas/operation.py"
    
    new_content = '''from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class OperationBase(BaseModel):
    manufacturing_order_id: int
    operation_number: str
    name: str
    description: str
    operation_type: str = "production"  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    workcenter_id: int = 1  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    planned_duration: float
    actual_duration: Optional[float] = None
    status: str = "pending"
    assigned_employee_id: Optional[int] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    quality_check_passed: Optional[bool] = None
    notes: Optional[str] = None

class OperationCreate(OperationBase):
    pass

class OperationUpdate(BaseModel):
    operation_number: Optional[str] = None
    name: Optional[str] = None
    description: Optional[str] = None
    operation_type: Optional[str] = None
    workcenter_id: Optional[int] = None
    planned_duration: Optional[float] = None
    actual_duration: Optional[float] = None
    status: Optional[str] = None
    assigned_employee_id: Optional[int] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    quality_check_passed: Optional[bool] = None
    notes: Optional[str] = None

class Operation(OperationBase):
    id: int
    created_at: datetime

    class Config:
        from_attributes = True
'''

    with open(operation_schema_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –°—Ö–µ–º–∞ Operation –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_order_model():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Order - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è"""
    order_model_path = "src/models/order.py"
    
    new_content = '''from sqlalchemy import Column, Integer, String, DateTime, ForeignKey
from sqlalchemy.sql import func
from src.database import Base

class Order(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("projects.id"), default=1)  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    name = Column(String, index=True)  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    description = Column(String)  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    product_name = Column(String, index=True)
    quantity = Column(Integer)
    status = Column(String, default="pending")
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    def __repr__(self):
        return f"<Order {self.name} - {self.product_name}>"
'''

    with open(order_model_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –ú–æ–¥–µ–ª—å Order –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_order_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É Order"""
    order_schema_path = "src/schemas/order.py"
    
    new_content = '''from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class OrderBase(BaseModel):
    project_id: int = 1  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    name: str  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    description: str  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    product_name: str
    quantity: int
    status: str = "pending"

class OrderCreate(OrderBase):
    pass

class OrderUpdate(BaseModel):
    project_id: Optional[int] = None
    name: Optional[str] = None
    description: Optional[str] = None
    product_name: Optional[str] = None
    quantity: Optional[int] = None
    status: Optional[str] = None

class Order(OrderBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
'''

    with open(order_schema_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –°—Ö–µ–º–∞ Order –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_project_model():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å Project - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ status"""
    project_model_path = "src/models/project.py"
    
    new_content = '''from sqlalchemy import Column, Integer, String, DateTime
from sqlalchemy.sql import func
from src.database import Base

class Project(Base):
    __tablename__ = "projects"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String)
    status = Column(String, default="active")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    def __repr__(self):
        return f"<Project {self.name}>"
'''

    with open(project_model_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –ú–æ–¥–µ–ª—å Project –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def fix_project_schema():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É Project"""
    project_schema_path = "src/schemas/project.py"
    
    new_content = '''from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class ProjectBase(BaseModel):
    name: str
    description: str
    status: str = "active"  # –î–æ–±–∞–≤–ª–µ–Ω–æ

class ProjectCreate(ProjectBase):
    pass

class ProjectUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    status: Optional[str] = None

class Project(ProjectBase):
    id: int
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
'''

    with open(project_schema_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    print("‚úÖ –°—Ö–µ–º–∞ Project –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")

def main():
    print("üõ† –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö –í–ê–õ–ò–î–ê–¶–ò–ò PYDANTIC")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏ —Å—Ö–µ–º—ã
    fix_employee_model()
    fix_employee_schema()
    fix_operation_model()
    fix_operation_schema()
    fix_order_model()
    fix_order_schema()
    fix_project_model()
    fix_project_schema()
    
    print("\\n‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
    print("–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è --reload")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–µ—Ä–µ–∑: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
